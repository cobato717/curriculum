■ 開発
ウォーターフォール開発
	開発現場でよく用いられる手法で、開発手順を一つずつ確認しながら工程を進めていく方法。
	開発を各工程に分けて進めるが、次のフェーズに進むと後戻りができない手法でもある。
	開発担当者や責任者、クライアントが各工程の成果物を共に確認し、
	双方の合意を得たうえで各工程を完了と見なしていく。
	ウォーターフォール型開発の特徴はひとつひとつの工程に抜けモレがないかどうか厳重に管理しながら
	進めていくことで、クライアントに丁寧なヒアリング調査を行い、要件定義が完了次第作られる。
	基本設計を土台にして詳細設計のフェーズへと進んでいくため、前の工程に欠陥があっては次へと進めない。

アジャイル開発
	クライアントの要望に応えるシステムをできる限り素早くリリースしようという考えに基づいている開発方法。
	クライアントのビジネスの始動を早めようという目的がある。
	リリースを早くするには搭載する機能を最低限の状態にする方法が取られるケースが多い。
	アジャイル型開発では開発メンバーがシステムにおける優先度の順位をつけ、短い期間での納品を目指して動く。
	システムの優先順位を決めるためにミーティングを毎日行い、チーム内でスムーズに連携をとる「スクラム」という
	手法が主に取られる。

マイグレーション
	マイグレーション（migration）は英単語では、移住、移転、移動などを意味するが
	IT用語としては既存システムや、ソフトウェア、データなどを別の環境に移転したり、新しい環境に移行することを意味する。
	システムの場合は、長年使用している古いオンプレミス環境からクラウドサービスなどのような新たな環境に移行させることが
	主流になってきている。オンプレミス環境から移行をし、クラウドサービスのリソースを利用することやデータセンターに
	コンピューター機器を預けることにより社内環境に物理的なサーバやネットワーク機器を保管しない方法をサーバレスコンピュータという。
	クラウドサービスの場合は必要なマシン・リソースを割り当て動的に管理をし、一定の金額ではなく利用したリソース量に基づいた
	金額を支払うサービスで利用者にとってはインフラ環境の調達のしやすさや運用コストを削減できることなどがメリット。
	
デグレーション
	デグレーション（degradation）は「低下する」を意味するdegradeでデグレと省される日本のＩＴ業界特有の言葉。
	デグレの意味は以前のバージョンよりもシステムの品質が低下するトラブルのこと。
	具体的には以前は正常に作動していたはずの機能が停止する、バグが不具合を修正しようとしたらかえって性能が悪化するといったものがある。
	エンジニアにとっては避けたいデグレだが、デグレはIT業界では当たり前のように発生する。
	そのため、エンジニア同士の会話ではよく使われる。デグレーションのことを英語圏のIT業界では「後戻り」などを意味する
	リグレッション（regression）と呼ぶ。英語圏ではデグレーションは通用しない。

デプロイ
	デプロイ（deploy）は「展開する・配置する」といった意味。
	システム開発におけるデプロイとは、開発したアプリケーション（機能やサービス）をサーバ上に展開・配置して利用できるようにすること。
	WEBアプリケーションであれば実行ファイルをWEBサーバやアプリケーションサーバにアップロードして、その実行ファイルを実行することで
	サーバ上でアプリケーションを動かせるようになり、ユーザーが利用できるようになる。この一連の作業がデプロイ。
	デプロイは基本的にアプリケーションの一時停止やサーバの再起動を伴う。アプリケーションが利用できない期間（ダウンタイム）が
	発生する。アプリケーションを稼働したままサーバの再起動を伴わないデプロイは「ホットデプロイ」と」いう。
	
コンフリクト
	コンフリクト（conflict）は「競合・衝突・対立・葛藤・緊張・紛争」などの意味を持つ。
	データベースシステムやファイルシステム、バージョン管理システムなどで、同じ対象や領域（レコードやファイルなど）に、
	同時に複数の更新要求が発生し、内容が損なわれたり、要求が拒絶されるなど正常に処理できない状態のことをコンフリクトという。

環境
	環境（environment）
	ITの分野では、ある装置やソフトウェアにとって、それが導入されるコンピュータのハードウェアの構成や設定、OSなどソフトウェアの
	構成や設定および、それら全体の組み合わせのことを環境（動作環境）という。
	周辺機器やアプリケーションソフトなどをコンピュータに追加する際には、動作可能な機器やOSの種類、必要とする装置やソフトウェアなどが
	決まっており、これらを適切に組み合わせた環境を用意する必要がある。

開発環境（ローカル）
	開発環境（development environment）は基本的にパソコン内のローカル環境に構築する。
	開発者用のテスト環境というより開発者が自由に操作できるローカル環境と
	いう方が正しい認識。複数メンバーで開発していれば、テストや進捗状況を統合開発環境でリモート共有することもある。	

検証環境（ステージング）
	検証環境（quality assurance）は、開発環境で作られたシステムをテストするための工程で誤記やリンクミスなどをチェックし、
	適宜修正する段階。開発環境と分けることで別の開発作業と並行してテストできるようになる。
	検証環境ではプログラムの一部において動作確認する「単体テスト」やプログラムの全体の動作を確認する「結合テスト」が行われる。
	単体テストは開発者自身が実施するケースが多いため、開発環境と検証環境をまとめることがある。
	しかし、結合テストの場合は複数の開発メンバーが関与するため、検証環境を分けるのが一般的。バグを取りきる作業工程として
	検証環境は重要な役割をもっている。なお、短期間で開発を進めるアジャイル開発では自動でテストを組み込んでいる。

本番環境
	本番環境（production environment）とはユーザーが実際にシステムを使う環境のこと。
	それに対し、システム開発を行う環境を「開発環境」という。また、ソフトウェアを本番環境で実際に稼働させることを
	「デプロイ」もしくは「デプロイメント」と呼ぶ。

設計書／仕様書
	仕様書（specification document）とは、工業製品やソフトウェア、情報システム、サービスなどを開発する際に備えるべき機能や
	その性能、特性、満たすべき要件などを図表や文章などで記述した文書。何を作るべきかを明確にして関係者間で共有するために作成される。
	情報システムの受託開発のように発注者と受注者が別れている場合は金額や期間の算定根拠や交渉の前提条件ともなるため、両者の間で、
	齟齬がないよう入念に作りこんでいくことが多い。一般的には仕様書には何を作るかを記し、どのように作るかは記さない。
	開発や製造の方法、構造の詳細や構成要素、使用する材料や部品などは設計工程で検討し、設計書や設計図などの形でまとめることが多い。

要件定義
	要件定義（requirements definition）とは、システムやソフトウェアの開発において、実装すべき機能や満たすべき性能などを明確に
	していく作業のこと。いわゆる上流工程の一部で、実際の開発、実装作業を始める前に行う作業の一つ。
	
基本設計書
	基本設計書とは、システム機能を具体化するために必要なもので要件定義の内容を元にどのような画面になるかなどを定めるもの。
	どのような要件の機能を備えるかを整理してその用件をシステムに反映させることを基本設計と呼び、基本設計に必要なのが基本設計書。
	基本設計のフェーズ」ではクライアントの要望を満たす機能や製品をどのように作るかを決める。作成すべき機能を洗い出し、どのような
	ハードウェアやミドルウェアを組み合わせることで機能が実装できるか明確にしておく必要がある。
	実装すべき機能は要件定義書を参考にする。この段階の成果物は基本設計となる基本設計書をクライアントと共有し、仕上がりイメージ
	に齟齬がないかヒアリング調査する。	

詳細設計書
	詳細設計はクライアントと共有する機会が多い基本設計書とは異なり、開発者や内部者に向けて書類を作成するフェーズ。
	実際にどのような開発を行いプログラムを動作させるかを決めていく。プログラマーはこのフェーズで」の成果物である詳細設計書を
	元にしてプログラミングしていく。そのため、クライアント目線ではなくプログラマー目線で書類を作成しなければならない。
	機能が正常に動作した場合と、異常が見受けられた場合の処理方法も記載していく必要がある。特に異常時に関しては詳細に処理フロー
	を記載しておく。
	
テスト
	開発したシステムやモジュールなどが正しく動作するか、仕様書どおりに作成されているか、性能に問題はないかなど、
	システムやモジュールに対して完成度を確かめるために行う作業のこと。開発者側が行うテストと、ユーザー側。

単体テスト（UT）
	単体テストでは、プログラミングして完成した機能単体がエラーなく作動しているかどうか性能を評価する。規定通りに作動している
	ことを証明できるエビデンスをとっていく必要があり、成果物もまたエビデンスとなる。異常が発生した場合は詳細設計書に記述してある
	通り、異常発生時の処理フローに従って異常を解決していく。

結合テスト（CT／IT）
	結合テストでは単体テストのフェーズで想定通りに作動した機能同士を連結させ、きちんと作動するか確認して性能を評価する。
	機能を連結させてもプログラムがエラーなく作動することを確認することが目的。結合テストでも、プログラムが想定通りに作動した
	ことを証明できるエビデンスをとってそれを成果物とする。

総合テスト（ST）
	総合テストではシステム全体を連結させてその機能を評価する。全体を連結させてもエラーなく作動するか確認することが目的。
	作動の様子を示すエビデンスを成果物とする。異常が発生した場合は前のフェーズに戻ってどこにエラーがあるかを探らなければ
	ならない。スムーズに機能が作動するようであれば次のフェーズに進む。

エビデンス／証跡
	エビデンス（evidence）とは、証拠、根拠、証言、痕跡などの意味を持つ英単語。ITの分野では、システム開発のテスト工程などで、システムが
	正しく動作している、あるいは不具合が生じたことを示す証拠となる書類やデータなどをこのように呼ぶことが多い。
	ソフトウェアなどの動作が、ある条件や入力、操作手順によって特定の状態に至ったことを証明する証拠資料をエビデンスという。
	ある瞬間の表示状態を画像として取り込んだ画面キャプチャや、生成されたデータファイル、記録されたログデータ、外部の別の
	システムが受信したデータなどが用いられることが多い。テスト報告書やバグレポートなどに添付されて開発元などに報告される。

データパッチ
	ITの分野では、ソフトウェアを構成するプログラムやデータを更新・修正するために、新しい版との相違点（差分）を抜き出した
	データのことをパッチという。ファイルの形にまとめることが多いため「パッチファイル」とも呼ばれる。
	パッチを反映させて最新の状態に更新することを「パッチを当てる」「パッチを適用する」などという。
	大規模なソフトウェアなどでは、小さな修正や改良を行う度に全体を入れ替えるのは効率が悪いため、修正点だけを抜き出して
	パッチを作成し、これを既存のソフトウェアに組み込むことで修正を行うという手法がよく用いられる。
	パッチは開発元や販売元からインターネットなどを通じて利用者に無償で配布されることが多い。

Access	
	マクロリレーショナルデータベース（RDB）を作成・管理するためのソフトウェアで、データベース管理システム（DMBS）と
	グラフィック表示で対話的に操作できるアプリケーション（GUIフロントエンド）が一体化している。
	テーブルの作成・編集やレコードの入力、リレーションシップ（関連付け）の設定などをウィザードやフォームなどのGUIツールに
	よって行うことができ、SQLクエリも単純なものならマウス操作で項目を指定してくことで組み立てる機能が用意されている。
	入力フォームやレポートを作成してデータと共に保存できるため、プログラミングなどを行わなくても簡易なデータベースアプリケーションを
	開発できる。これらを通じてデータの入力や集計・解析などを行うようにすれば、データベースの知識のない人でもデータの管理を行うことが
	できる。他のOfficeソフト同様、マクロやVBA（Visual Basic for Applications）などの拡張機能にも対応しており、複雑な処理や
	反復作業などをプログラムとして記述し自動化することができる。外部の開発者の作った「アドイン」を追加して機能を拡張する
	仕組みも用意されている。

VBA
	Microsoft社のOfficeシリーズのソフトウェアの一部であるWordやExcel、Access、PowerPointなどで利用できる機能で、同社の
	プログラミング言語および実行環境であるVisual Basicの簡易版を用いてプログラムを作成することができる。
	これらのソフトウェアの動作の一部を変更したり、繰り返し行われる定型的な作業や複雑な処理を自動的に実行することができる。
	VBA対応のアプリケーションには開発環境と実行環境の両方が組み込まれており、記述したプログラムは機械語への変換などの作業を
	行わなくてもその場で即座に実行することできる。作成したプログラムはファイルの一部としてデータと共に記録することができ、
	別のコンピュータでそのファイルを開けば同じように実行することができる。

GAS（Google Apps Script）
	GASはGoogle Apps Scriptの略称で、Google が提供しているプログラミング言語で、JavaScriptがベースとなっている。
	
API
	APIとは、あるコンピュータプログラム（ソフトウェア）の機能や管理するデータなどを、外部の他のプログラムから呼び出して利用
	するための手順やデータ形式などを定めた規約のこと。個々のソフトウェアの開発者が毎回すべての機能をゼロから開発するのは困難で
	無駄なため、多くのソフトウェアが共通して利用する機能は、OSやミドルウェアなどの形でまとめて提供されている。
	そのような汎用的な機能を呼び出して利用するための手続きを定めたものがAPIで、個々の開発者はAPIに従って機能を呼び出す
	短いコードを記述するだけで、自分で一から処理内容を記述しなくてもその機能を利用したソフトウェアを作成することができる。
	広義には、プログラミング言語の提供する機能や言語処理系に付属する標準ライブラリの持つ機能を呼び出すための規約などを含む場合
	もある（Java APIなど）。

WEB API
	Web APIとは、コンピュータプログラムの提供する機能を外部の別のプログラムから呼び出して利用するための手順・規約
	（API：Application Programming Interface）の類型の一つで、HTTPなどWebの技術を用いて構築されたもの。
	Webサイトに外部のサイトの提供する機能や情報を組み込んだり、アプリケーションソフトからWeb上で公開されている機能や
	情報を利用する際などに用いられる。Web APIで機能を公開しているサーバに対して、インターネットなどを通じて依頼内容を
	HTTPリクエストの形で送信すると、処理結果がHTTPレスポンスの形で送られてくる。呼び出し側が挙動や入力データを指定する
	引数はURLパラメータ（クエリ文字列）などの形でURLの一部として指定することが多い。

REST API
	RESTful APIとは、Webシステムを外部から利用するためのプログラムの呼び出し規約（API）の種類の一つで、「REST」
	（レスト）と呼ばれる設計原則に従って策定されたもの。RESTそのものは適用範囲の広い抽象的なモデルだが、一般的には
	RESTの考え方をWeb APIに適用したものをRESTful APIと呼んでいる。RESTful APIでは、URL/URIですべてのリソースを一意に識別し、
	クライアントがHTTP（あるいはHTTPS）で要求（リクエスト）を送信すると、応答（レスポンス）がXMLやHTML、JSON、CSV、
	プレーンテキストなどで返される。URLパラメータ指定により引数を渡す仕組みなどはあるものの、セッション管理や状態管理などは
	行わず（ステートレス）、同じURLに対する呼び出しには常に同じ結果が返されることが期待される。
	また、データの取得はHTTPのGETメソッド、書き込みならばPOSTメソッドといったように、リソースの操作の種類は極力HTTPメソッドに
	よって指定する。結果の通知（特にエラー通知）も極力HTTPステータスコードで行うという原則が含まれることもある。
	ただし、これらの技術的な要件は厳密に共有されているわけではなく、「SOAPやRPCなどを必要としない、軽量でフラットな
	Webインターフェース」くらいの意味で用いられることが多い。

SOAP（Simple Object Access Protocol）
	SOAPとは、異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための
	通信プロトコル（規約）の一つ。メッセージの記述にXMLを、データ伝送に主にHTTPを用い、Webサービスの提供や利用に適していると
	される。SOAPで実装されたWebサービスの使い方などのインターフェース情報はWSDL（Web Services Description Language）呼ばれる
	XMLベースの言語で記述され、サービスの利用者に公開される。様々なWebサービスのWSDL文書を集め、どこでどのようなWebサービスが
	利用できるのかといった情報を収集して利用者が検索・発見できるようにしたデータベースをUDDI（Universal Description, Discovery and Integration）という。
	
Ajax(Asynchronous JavaScript + XML)
	Ajaxとは、あるWebページを表示した状態のまま、別のページや再読込などを伴わずにWebサーバ側と通信を行い、動的に表示内容を変更する手法。
	ページ上でプログラムを実行できるプログラミング言語JavaScriptの拡張機能を用いる。

XML(Extensible Markup Language)
	XMLとは、文書やデータの意味や構造を記述するためのマークアップ言語の一つ。マークアップ言語とは、「タグ」と呼ばれる特定の文字列で
	地の文に情報の意味や構造、装飾などを埋め込んでいく言語のことで、XMLはユーザが独自のタグを指定できることから、マークアップ言語を
	作成するためのメタ言語とも言われる。

JSON(JavaScript Object Notation)
	JSONとは、JavaScriptにおけるオブジェクトの表記法を応用したテキスト（文字）ベースのデータ形式。
	多数の要素が複雑な構造で組み合わせられたデータを簡潔な表記で書き表すことができる。JavaScriptプログラム上ではコードとして実行する
	だけで読み込みが完了する。	

ステータスコード
	ステータスコードとは、システムが処理結果や現在の状態を外部に知らせるために発する数字や短い符号。問題発生時にその種類や状態を
	知らせるものは「エラーコード」とも呼ばれる。

クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
	CORSとは、Webサーバに特殊なHTTPヘッダ項目を追加することで、送り出したWebページ上のスクリプトがWebブラウザから別のサーバへ
	アクセスできるようにすること。CORSとは、Webサーバに特殊なHTTPヘッダ項目を追加することで、送り出したWebページ上のスクリプトが
	Webブラウザから別のサーバへアクセスできるようにすること。通常はWebページ上のスクリプトなどからは同一オリジンのリソースのみ
	アクセスできるという制限（SOP：Same-Origin Policy/同一生成元ポリシー）が課されるが、Webサーバ側でCORSの指定を行うと、
	この原則を緩和して指定されたオリジンへのアクセスが許可される。複数のドメインにまたがって情報や機能を組み合わせたい場合に用いられる。	
	
バリデーション
	バリデーションとは、検証、実証、認可、妥当性確認などの意味を持つ英単語。ITの分野では、対象がその仕様や文法などに照らして適切に
	記述・構築されているか否かを検証するという意味で用いられることが多い。データのバリデーションといった場合、記述・入力されたデータが、
	あらかじめ規定された条件や仕様、形式などに適合しているかどうかを検証・確認することを表す。形式的な妥当性の検証であり、意味論的に
	適切な内容かどうかは判断しない。

データ連携
	データ連携とは、企業内外のさまざまなシステムやアプリケーションのデータをつないで、有効活用するための仕組みやプロセスのこと

Daemon
	デーモンとは、UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは無関係に処理を行うバックグラウンド
	プロセスの一種で、別のプログラムや機器、通信相手など外部からの要求を受け付けて処理を実行したり、あらかじめ設定されたタイミングで
	自律的に特定の処理を実行したりする。デーモンとは、UNIX系OSでメインメモリ上に常駐して特定の機能を提供するプログラム。利用者の操作とは
	無関係に処理を行うバックグラウンドプロセスの一種で、別のプログラムや機器、通信相手など外部からの要求を受け付けて処理を実行したり、
	あらかじめ設定されたタイミングで自律的に特定の処理を実行したりする。

CRON
	cronとは、多くのUNIX系OSで標準的に利用される常駐プログラム（デーモン）の一種で、利用者の設定したスケジュールに従って指定された
	プログラムを定期的に起動してくれるもの。利用者はcrontab（“cron table”の略）コマンドで実行したいプログラムやコマンド、
	シェルスクリプトなどと実行日時を指定すると、同名のテキストファイル（crontabファイル）に設定が保存される。
	システムに常駐するデーモンの一つであるcrond（“cron daemon”の略）がcrontabファイルに書かれたスケジュールに従って、決まった日時に
	指定されたプログラムを実行する。

バッチ
	バッチ処理とは、複数のプログラムからなる作業において、あらかじめ一連の手順を登録しておき、まとめて連続的に実行する方式。
	または、一定期間や一定量ごとにデータをまとめて一括して処理する方式。利用者は起動するプログラムやパラメータ、使用するデータファイル
	などを指定したバッチジョブを作成し、システムのジョブスケジューラに起動日時や起動間隔などを登録する。システムは指定された日時や間隔に
	従ってジョブを起動し、指定されたプログラムを順番に実行する。

ログ
	ログとは、起こった出来事についての情報などを一定の形式で時系列に記録・蓄積したデータのこと。“log” の原義は船の航海記録（日誌）。
	ある機器やソフトウェア、システムについて、その起動や停止、エラーや障害の発生、利用者による操作や設定の変更、外部との通信など、
	稼働中に起こった出来事の内容を日時などとともに時系列に記録したものをログという。稼働状況の確認や集計、不具合の原因調査などのために
	よく参照される。

CSV(Comma-Separated Values)
	CSVとは、テキスト（文字）データの形式の一つで、項目をカンマ「,」で区切って列挙したもの。複数の項目をレコードとしてまとめる場合は、
	改行でレコードの区切りを表す。標準のファイル拡張子は「.csv」。表のように項目が縦横に並んだデータを記述することができる形式の一つで、
	表計算ソフトやデータベースソフトなど多くのソフトウェアが標準で対応しており、システム間のデータ交換などで古くから広く用いられている。

TSV(Tab-Separated Values)
	TSVとは、複数の項目で構成されるデータを複数件列挙して表現することができる汎用的なデータ形式の一つで、項目間の区切り文字にタブ文字を用いるもの。
	データを文字の連なりとして表現するテキスト（文字）データおよびテキストファイルの形式の一つで、複数の項目をタブ文字で区切って一件のレコードを構成し、
	複数件のレコードを改行文字で区切ってデータ全体を構成する。
	
プルリクエスト（マージリクエスト）
	プルリクエストとは、分散バージョン管理システム（VCS）の機能の一つで、コードなどを追加・修正した際、本体への反映を他の開発者に依頼する機能。
	「変更を本人以外がレビューしてから反映させる」という手順を容易に実現することができる。
	分散型のVCSではプロジェクト本体は中央リポジトリ（リモートリポジトリ）で管理され、各開発者は自分のコンピュータに複製（ローカルリポジトリ）を
	取って追加や修正を行い、本体へ反映（マージ）させる。


■ チケット管理ツール
asana
	「Asana」は、Facebook共同創設者のダスティン・モスコヴィッツと、”Likeボタン”を作ったGoogle出身のエンジニア、ジャスティン・ローゼンスタインの
	2人の元Facebookエンジニアがつくった、プロジェクト管理ツール。
	Asana はタスク管理ツールでもプロジェクト管理ツールでもない、ワークマネジメントプラットフォームという一つ上のレイヤーに位置するツール。
	一つの仕事を回すだけでなく、社内の業務全体、ひいては組織の在り方全体を見える化して、最適な形へ調整しやすくするためのもの。

Backlog
	Backlogは、チームが協力しながら作業を進めるためのコラボレーション型プロジェクト管理ツール。企画・マーケティング・総務の各種業務から、
	製造・開発のプロジェクトまで、様々なタスク管理に活用できる。

Jooto
	Jooto（ジョートー）とは、2014年にシンガポール在住の日本人が立ち上げたクラウド型のタスク管理ツール。Jootoをひと目見るだけで、
	いつもメンバー全員がプロジェクトの状況が分かることを目指して設計されている。

Redmine
	Redmineとは、オープンソースのプロジェクト管理ソフトの一つ。複数人の共同作業における進捗管理や情報共有などができるシステムで、
	基本的な操作や管理はWebブラウザを通じて行なうことができる。
	
Trello
	Trello（トレロ）は、タスクをカード（かんばん方式）で視覚的に管理し、チームでの効率的なタスク共有をするコラボレーションツール。
	クラウド型でスマートフォンやパソコンを使って簡単にアクセスでき、複数のチームメンバーが必要な情報を共有し、チームの誰もがタスクの
	進行状況をすぐに把握することができる。

■ バージョン管理
集中型
	仕組みが簡単な点がメリット。SVNを扱う際も操作がとてもシンプルなので覚えることが少なく、すぐにプロジェクト内で浸透させることが可能。
	デメリットとしては、やはりバージョンの管理がローカルでできない点。例えばソースを開発しているときに、細めにコミットして個人履歴を置いておきたいが、
	SVNの場合、サーバに対してコミットを行うことになるので、たくさんの開発者で共有しているリポジトリに対して細めにコミットは難しい。

分散型
	ローカル環境で履歴を管理できる。Gitの場合ローカルにあるリポジトリに自身のソースを登録することが可能で、 自分の作業の履歴を作ることが可能。
	チーム全体の履歴だけでなく、自分の開発履歴まで管理できる。また、サーバ障害などでリポジトリが消えてしまったとしても、SVNの場合履歴の復元までは
	不可能だが、Gitの場合は誰かのローカル環境のリポジトリから復元すれば、サーバから取得時点にはなるが、履歴まで復元することが可能。
	デメリットとしては、慣れてしまえば簡単だがそれなりに覚えることが多い点。プロジェクト内で初めて使う人が多い場合、使用方法などを浸透させるのに時間がかかる。	

Github
	GitHubとは、バージョン管理システム「Git」（ギット）で管理するデータをインターネット上で共有・公開することができるネットサービスの一つ。
	米マイクロソフト（Microsoft）社傘下の同名企業（GitHub Inc.）が運営している。Gitで保管・管理するデータの集積（リポジトリ）を同社の運用するサーバ上に置き、
	組織内やチーム内で共有したり、広く一般に公開したりすることができる。Gitではソフトウェアのソースコードなどを管理することが多く、お互い離れた場所にいる
	開発者同士がコードを共有して共同で開発することができる。

Backlog
	バックログとは、残務、積み残し、受注残、未処理分、在庫分、予備にとっておく、未処理のまま溜まる、などの意味を持つ英単語。実施すべきとされながら、
	未処理、未着手のまま放置されている作業や業務、案件などのこと。今後着手すべき作業などを期限や優先度などとともに列挙にしたものを指すこともある。

SourceTree
	SourceTreeとは、Atlassian社が提供するGitの分散管理システムツール操作を効率的に扱うGUIで、GUIとはユーザー画面上で視覚的に操作ができる機能。
	 WindowsとMacのOS両方に対応しており、チームで行うプログラム構築作業など、基軸となるプログラムを元に共同開発ができる。

Tortoise SVN
	TortoiseSVN は、Subversion のクライアントで、Windowsのシェルエクステンションとして機能する。
	専用のGUIを備えており、CUI の Subversion より、直感的で簡単に扱うことが出来る。
	Subversion はクライアント/サーバ型の集中型バージョン管理システム。
	TortoiseSVN はサーバ（Subversion）に対するクライアント。

Git Flow
	git-flowとはGitにおけるリポジトリの分岐モデルであり、ルールのことを指す。
	それぞれのブランチを明確に定義し、複数人での開発時にそれぞれが好き勝手にブランチを作成し混乱することを防ぐ。

master
	プロダクトとしてリリースする用のブランチ。リリースしたらタグ付けする。
	※このブランチ上での作業は行わない

release
	プロダクトリリースの準備用。
	リリース予定の機能やバグフィックスが反映された状態のdevelopから分岐する。
	リリース準備が整ったら、masterにマージすると共にdevelopにマージする。

develop
	開発用ブランチ。コードが安定し、リリース準備ができたらreleaseへマージする。
	※このブランチ上での作業は行わない

feature
	機能の追加用。developから分岐し、developにマージする。

■ FW／ライブラリ
FW
	フレームワークとは、枠組み、骨組み、骨格、下部構造、構造、組織などの意味を持つ英単語。
	ITの分野では、問題に取り組むための概念や方法を体系化した枠組みのことや、ソフトウェア開発の土台となるプログラム部品などを指すことが多い。

Spring Framework
	Spring Frameworkとは、Java言語によるソフトウェア開発を支援するフレームワークの一つ。
	様々な開発プロジェクトに適用できる汎用性の高さとモジュール化された豊富な機能に定評がある。

Struts
	Apache Strutsとは、Javaを用いてWebアプリケーションを開発するためのフレームワークの一つ。Apacheソフトウェア財団（ASF）が開発を主催し、
	オープンソースソフトウェアとして公開している。

JSF（Java Server Faces）
	JSFとは、Java言語を用いてWebアプリケーションを開発するためのフレームワークの一つ。
	Javaの開発元であるOracle社が開発・提供しているもので、その仕様はJava EE（Java Platform, Enterprise Edition）の一部として取り込まれている。

ライブラリ
	ITの分野では、ある特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、
	そのようなプログラム部品を複数集めて一つのファイルに収納したものをライブラリという。

Bootstrap
	Bootstrapとは、米ツイッター（Twitter）社が開発したオープンソースのWebアプリケーションフレームワーク。
	既成の要素や雛形を使用して迅速にWebアプリケーションを開発することができる。

Flyway
	Flyway は、オープンソースのデータベースマイグレーションツール。
	Flyway を使うことで、データベースの状態をバージョン管理できるようになる。

Jackson
	JacksonはJavaで使えるJSONライブラリ。JSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、
	逆にJavaオブジェクトをJSON文字列に変換できる。

jQuery
	jQueryとは、Webブラウザ上で動作するJavaScriptライブラリの一つ。
	ブラウザの種類に依らず簡潔な記述で豊富な機能を活用することができる。オープンソースとして公開・配布されている。
	シンプルなコードでWebページの要素に演出効果やアニメーションなどを追加したり、スタイルやイベント起動の設定や変更などを行うことができる。
	Ajaxによる外部との通信も容易に実装できるほか、様々な機能を実現する豊富な対応プラグインが公開されている。

Junit
	JUnitとは、Java言語で開発されたプログラムの単体テスト（ユニットテスト）を行なうためのソフトウェア。
	また、そこで用いられるテストコードの記述体系を含むテストフレームワーク。

Log4j
	Apache Log4j（アパッチ ログフォージェイ）は、 オープンソースのJava プログラム用のロギングユーティリティ（API）。
	Apache Log4jは、2001年1月8日にバージョン1.0がリリースされて以来、Javaアプリケーションの標準的なロギングユーティリティとして長く利用されおり、
	単にLog4jと呼ばれることが多い。Apache Log4jは、設定ファイルでの設定により、デバッグ情報やエラー情報などをプログラム内からコンソール、
	ファイル、その他ログサーバ等に出力することができる。

Lombok
	Lombokとは、Java特有の冗長なコードを簡潔にしてくれるオープンソースのライブラリ。
	ライセンスはMITライセンスなので自由に利用することが出来る。
	LombokはEclipseの自動生成機能の代わりにアノテーションを使うことで冗長なコードを簡潔にする。

ORM
	O/Rマッピングとは、オブジェクト指向プログラミング言語におけるオブジェクトとリレーショナルデータベース（RDB）の間でデータ形式の相互変換を行うこと。
	そのための機能やソフトウェアを「O/Rマッパー」（O/R mapper）という。
	オブジェクト指向言語では互いに関連するデータ項目を一つのオブジェクトにまとめ、データを操作する手続き（メソッド）と一体的に管理する。
	一方、リレーショナルデータベース（relational database）では一件のデータを複数の属性の値の組として表現し、組を連ねた表の形でデータを永続的に保存する。

■ 連絡ツール
ChatWork
	Chatwork（チャットワーク）とは、Chatwork株式会社が提供するクラウド型ビジネスチャットツールである。
	メッセージのやりとりだけでなく、タスク管理やファイル共有、ビデオ通話などが可能である。

Slack
	Slack（スラック）は、スチュワート・バターフィールドによって開発されたチームコミュニケーションツール。
	Slackという名称は"Searchable Log of All Conversation and Knowledge"のアクロニムである。

IP Messenger
	IP Messenger は白水啓章さんが作られた LAN 用メッセンジャーソフト。
	同じネットワーク内のメンバーを自動認識し、簡単にクライアント同士がリアルタイムに情報交換できる優れたソフトウェア。
	IP Messenger は、ブロードキャスト (broadcast) と呼ばれるパケットを LAN 内に送信する事で、他に IP Messenger を起動している PC を探索しユーザを自動認識している。
	ブロードキャストパケットの到達範囲は、一般的に社内の同じ部署やフロアとなるので、手軽に部署やプロジェクト内のユーザと情報交換ができるようになる。

■ Java
Javadoc
	Javadocとは、Java言語のソースコードに一定の書式でコメントを記述することで、クラスの説明やメソッドの呼び出し方などの仕様をHTMLなどの文書形式でまとめてくれる仕組み。
	また、そのためのコメントの書式。各開発者がJavadocの記法に従ってソースコード内にコメントを記すことで、人によらず一定の形式でクラスやAPIの説明を生成することができる。
	また、コードとは別に仕様などを説明する文書（ドキュメント）を作成・管理する必要がなくなるため、ドキュメントの更新漏れなどが減り、最新の状態を正確に把握しやすくなる。

アノテーション
	アノテーションとは、「注釈」という意味の英単語で、ITの分野ではデータやプログラムの中に特殊な記法を用いて埋め込まれた付加情報のことをこのように呼ぶことが多い。
	プログラミングでは、ソースコード中に登場する要素（クラスやメソッドなど）に対して、処理系に伝達したい付加的な情報（メタデータ）を注記する仕組みのことをアノテーションという。
	「このメソッドはテスト用である」「ここでコンパイラは警告を出してはならない」「このメソッドはオーバーライドである」などの情報を付記し、コンパイル時や実行時に参照させることができる。

メモリ管理
	MMUとは、コンピュータを構成する主要な装置の一種で、CPU（中央処理装置）からメインメモリ（主記憶装置）へのアクセスを補助するもの。仮想メモリ（仮想記憶）の管理などを行う。
	MMUは主に仮想メモリの管理を行う役割を果たし、物理アドレスと仮想アドレスの対応関係を記録して相互に変換したり、要求されたページが物理メモリに存在しない場合にそのことを
	オペレーティングシステム（OS）に知らせたりする（ページフォールト）。

ヒープ
	ヒープとは、データ構造の一種で、木構造（ツリー構造）のうち、親要素が子要素より常に大きい（あるいは小さい）という条件を満たすもの。
	また、コンピュータプログラムが利用するメモリ領域の種類の一つで、実行時に任意のタイミングで確保や解放が可能なものをヒープ領域というが、これをヒープと略す場合がある。

GC
	ガベージコレクションとは、コンピュータプログラムの実行環境などが備える機能の一つで、実行中のプログラムが占有していたメモリ領域のうち不要になったものを自動的に解放し、
	空き領域として再利用できるようにするもの。そのような処理を実行するプログラムを「ガベージコレクタ」（garbage collector）という。
	ガベージコレクションは仮想マシン（VM）などの言語処理系やライブラリの機能として提供され、実行中のプログラムの動作から不要になったと判断した領域を自動的に解放し、
	再確保できる空き領域に設定する。これにより、確保された領域への参照が失われ再利用不可能になってしまうメモリリークや、領域の二重解放、参照の無効化などを防止することができる。

GoF
	プログラミング用語としてのギャング・オブ・フォー(Gang of Four : GoF）とは、オブジェクト指向プログラミングにおける再利用性の高いコーディングのパターン、デザインパターンを
	まとめた4人のプログラマのことを指す。GoFは、エーリヒ・ガンマ、リチャード・ヘルム、ラルフ・ジョンソン、ジョン・ブリシディースの4人を指し、彼らは書籍、
	Design Patterns: Elements of Reusable Object-Oriented Software (オブジェクト指向における再利用のためのデザインパターン)の著者。

デザインパターン
	デザインパターンとは、オブジェクト指向プログラミングにおいて用いられている再利用性の高いコーディングのパターンのこと。

■ その他
オブジェクト指向
	オブジェクト指向とは、コンピュータプログラムの設計や実装についての考え方の一つで、互いに密接に関連するデータと手続き（処理手順）をオブジェクト（object）と
	呼ばれる一つのまとまりとして定義し、様々なオブジェクトを組み合わせて関連性や相互作用を記述していくことによりシステム全体を構築していく手法。

バッチ処理
	バッチ処理とは、複数のプログラムからなる作業において、あらかじめ一連の手順を登録しておき、まとめて連続的に実行する方式。または、一定期間や一定量ごとにデータをまとめて一括して処理する方式。

コンパイル
	コンパイルとは、プログラミング言語で書かれたコンピュータプログラム（ソースコード）を解析し、コンピュータが直接実行可能な形式のプログラム（オブジェクトコード）に変換すること。
	そのためのソフトウェアをコンパイラ（compiler）という。

カバレッジ
	カバレッジとは、取材範囲、補償範囲、受信範囲、対象範囲、被覆率などの意味を持つ英単語。カバーする範囲、カバー率の意。

プラットホーム
	プラットフォームとは、台、壇、台地、高台、舞台、演壇、乗降場、綱領などの意味を持つ英単語。
	ITの分野では、ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ（動作環境）のことをプラットフォームという。

