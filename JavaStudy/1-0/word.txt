■ IT
IT
	information technology情報技術。
	コンピューター・インターネット・携帯電話などを使う、情報処理や通信に関する技術を総合的に指していう語。
ICT
	information and communication technology情報通信技術。
	[補説]ITとほぼ同義。国際的にはICTが広く使われる。
IoT
	Internet of Thingsあらゆる物がインターネットを通じてつながることによって実現する新たなサービス、ビジネスモデル、
	またはそれを可能とする要素技術の総称。
■ OS
OS
	Operating System。パソコンを動かすための基本ソフト。
	OSのないパソコンは動かない。メモリ、ディスク、周辺機器などを管理するなど実に様々なことを行っている。
Windows
	アメリカのマイクロソフト社が開発したパーソナルコンピュータ（パソコン）用のオペレーティングシステム（OS）の名称。
	市場で販売されているほとんどのパソコンは、あらかじめウィンドウズが動く状態にされ販売されている
macOS (Mac OS X)
	アメリカ・アップル社のパソコンMacintosh（マッキントッシュ）用のOS（オペレーティングシステムOperating System）。	
	もともとは完全に自社開発していたが、バージョン10にあたる現行のMac OS XシリーズはUNIXの一種であるMach(マーク)をベースに再開発されたものである。
UNIX
	1969年に米国のベル研究所がミニコン用に開発したオペレーティングシステムの商標名。
	互換性・安定性・セキュリティー能力が高く、パソコンにも利用されている。
	Solarisr(ソラリス)、HP-UX、BSD、Linux(リナックス)など、UNIXから派生したオペレーティングシステムの総称を意味することもある。→UNIX系OS
Linux
	1991年にフィンランドの学生、リーナス・トーバルズがパソコン向けに開発した、UNIX系オペレーティングシステム。
	プログラムのソースコードを無償公開し、誰もが自由に改良・再配布できるオープンソースという思想に基づいて開発された代表例として知られる。
■ 言語・環境
マークアップ／
	文字の並びであるテキストに適当な指示を挿入して文字の形や大きさ，段落，見出しなど文章の構造と体裁を指定するためのコンピュータ用言語。
	ワールド・ワイド・ウェブ WWWの書類をつくるための HTML，組版ソフトウェアの TeXなどがある。
	マークアップは印刷用語で「組版指示」を意味する。1960年代末 IBMの研究者だったチャールズ・ゴールドファーブが新聞発行のコンピュータ化を進めているときに，文書中にコンピュータ用の指示命令（タグ）を挿入して組版を再現するという案を思いついたといわれ，1979年 IBMは GML; Generalized Markup Languageを発表した。1980年代 GMLをもとにした SGMLが国際標準化機構 ISOにより国際規格として策定されたが，データベースなど使用がかぎられていた。
フロントエンド／
	プログラムにデータを渡すための入り口になるプログラムのことをこう呼ぶ。
	DivXの場合、TMPGEncやAviUtlがフロントエンド。
	また、コマンドラインで動作するプログラムを扱いやすくするためにも用いられる(BeSweetはこのタイプ)。

HTML
	ウェブページを作るための規格です。ウェブページのファイル形式の名前でもあり、拡張子は「html」もしくは「htm」で、標準は前者です。
	HTMLファイルの実体はテキストファイルです。どのようにレイアウトをするか、どの部分を他のページへのリンク情報として扱うかなどが、
	本文と一緒に文字で記述されています。また、ページ上の画像は独立した画像ファイルとして別に存在しており、HTMLファイルには、どの画像をどこに配置するかといった情報のみが書かれています。
	HTMLは、「Hyper Text Markup Language」の略称です。
CSS
	《cascading style sheets》ウェブページなどのレイアウトやデザインに関する情報を記述したスタイルシートの一。フォント、文字の色や大きさ、行間など、文書の見栄えに関する情報のみを記述する。
	Webページのレイアウトを指定する規格。HTMLからレイアウトに関する記述を分離し、本来の目的である文書の論理構造の記述に戻すために規定された。CSSを使うと、文書中の文字の色やスタイルを一括して定義でき、
	HTMLを書き直すことなく、レイアウトを変更できる。W3Cによって規格化されている。

JavaScript
	アメリカのネットスケープコミュニケーションズ社（1998年AOLにより買収）が開発したスクリプト言語。1995年に発表された。スクリプト言語とはコンピュータにおける処理手順を記述する簡単な言語のことで、
	JavaScriptはインターネットのウェブページをつくるための記述言語であるHTML内にテキストで書き込んで、ブラウザーで利用する。
	HTMLだけでは表現できない機能をウェブ上で実現できるものとして広く普及した。1997年にはECMA（ヨーロッパ電子計算機工業会）により、ECMAScriptとして標準化されている。Javaという名がついているが、
	プログラミング言語のJavaとは異なるものである。タイマーや日付表示、各種関数、カーソルの動きやクリックにあわせた画面の切り替え、各種計算、アンケートフォームやメール、印刷など、ウェブ上にさまざまな機能を付加することができる。
jQuery
	Mozilla Corporationで、John Resig氏によって作られた様々な処理を短く簡単に書ける、読み込みが軽量なJavaScriptライブラリ。AjaxやJavaScriptのDOM操作等を簡単に記述できるようになる。
Java SE
	Java SEとは、プログラミング言語「Java」におけるAPIなどの機能セットの標準の一つで、基本的で汎用的な機能をまとめたもの。パソコン向けなどの標準的なJava仮想マシン（JVM）がこの仕様で動作する。
サーバーサイド
	サーバー側でプログラムを実行したりデータを管理したりすること。サーバーサイドでは、クライアントの環境に依存しにくく、開発や管理が容易、扱うデータをサーバー側のデータベースなどで一元管理できる、といったメリットがある。
	代表的なサーバーサイド技術としては、Java、PHP、ASP.NETなどがある。たとえば、PHPで記述されたWebアプリケーションは、Webサーバー側で実行され、クライアントのWebブラウザーには、HTMLとして表示される。
	そのため、PHPを実行するための環境を整える必要がない。これに対して、JavaアプレットやJavaスクリプトは、手元のパソコンのWebブラウザー上で実行するので、クライアントサイドのWebアプリケーションといえる。
	
.NET（C#, VB）
	Microsoftが提供する、.NET Framework上で動作するアプリケーション作成のための統合開発環境。前バージョンのVisual Studio 6.0では、Visual Basic、Visual C++、Visual InterDevの統合開発環境がそれぞれ独立していたものが、
	Visual Studio .NETでは1つに統合された。Visual Studio .NETは従来のC++でのWin32ネイティブアプリケーション作成機能に加えて、.NET Frameworkをサポートすることで、Visual C++によるマネージドアプリケーション、
	Viusal C#、Visual Basic .NETおよびViusal J#によるマネージドアプリケーションの作成が可能になっている。複数のプログラミング言語をサポートすることで、複数言語からなるアプリケーションの場合にも1つの環境で
	コンパイルからデバッグまで行える。作成可能なアプリケーションの種類は、基本的にはプログラミング言語には依存しない。Viusual Basic .NETでWindowsサービスを作成することも可能である。

Java
	中央処理装置 CPUやオペレーティングシステム OSなどの実行環境に左右されずに使えるオブジェクト指向のプログラム言語（→オブジェクト指向プログラミング）。アメリカ合衆国のサン・マイクロシステムズが 1995年に発表し，
	Cや C++との共通性，オブジェクト言語としての利便性，実行環境（プラットフォーム）に依存しないためインターネットに向いていることなどから世界中に広まった。Javaのソースコード（→ソースプログラム）は機械語に変換（コンパイル）されると
	プラットフォームとは独立のコードに変換され，それぞれの OSに組み込まれた Javaインタープリタ（仮想コンピュータ）によって解釈されて実行される。このため，CPUや OSなどの違いに左右されることなくプログラムを扱えるので，
	多様なコンピュータが混在するインターネット環境では理想的なものとなっている。
	Javaで開発されたプログラムで，ブラウザなどで HTML文書内から参照されるものは「アプレット」，独立しているものは通常と同じく「アプリケーション」と呼ばれる。

Java SE
	Java SE とは Java Platform, Standard Edition の略で、 Java で使用される API をまとめたものです。 API とは Application Programming Interface の略で、 この場合は Java の機能やデータなどを利用するための呼び出し方を定義したものと考えてください。
	Java で提供されている API は非常に多いのですが、 Java SE はその中でも基本となる API をまとめたものとなり、 例えば java.lang.String クラスなどが含まれます。

Java EE（Jakarta EE）
	サン・マイクロシステムズ社が開発したオブジェクト指向プログラミング言語「Java2」をコアとした、大規模サーバー構築用の開発・実行環境（プラットホーム）の総称。
	Java Enterprise Editionの略。
	企業の業務システムや電子商取引などで使われるサーバーには、さまざまな機能が必要になる。Java EEはそうした規模のシステム構築に必要な機能をまとめたものといえる。
	たとえばアプリケーションを開発するためのアプリケーション・プログラミングインターフェース（API）セット「Platform Specification」、プログラムを部品化した実行環境「Enterprise JavaBeans」、
	テスト環境「Blue Prints」、ウェブページにJavaプログラムを埋め込み動的な内容生成を可能にする「Java Server Pages」（JSP）、サーバー上でさまざまなソフトウェアを組み立てるためのXML対応APIなどが含まれる。
	以前はJ2EE（Java2 Platform, Enterprise Edition）とよばれたが、Javaの大幅なバージョンアップを機に「Java EE」とよばれるようになった。
	Java EE は 2017 年に Oracle から Eclipse Foundation に移管されました。今後は名称も Java EE から Jakarta EE という名前に変更となります。

Perl
	《practical extraction and report language》ラリー・ウォール氏が開発したテキストファイルを処理するためのスクリプト言語。UNIXに含まれているAWKやsedといったコマンドの機能を拡張したものであり、
	C言語のような汎用プログラミング言語として利用されている。インターネットが普及してからは、CGIを利用したプログラムを制作する際に利用される言語のひとつとして知られるようになった。	
PHP
	HTMLに埋め込む形で記述するスクリプティング言語。正式名称の「PHP: Hypertext Preprocessor」にもあるように、動的に生成されるページの作成に向いている。また、プログラムの表記法はC言語、Java、Perlの各言語から転用したものがベースとなっているが、PHP独自のものもある。
	ラスマス・ラードフ氏によって開発されたスクリプト言語。スクリプトはHTMLファイルに記述しておき、ユーザーからWebブラウザーによって処理を要求されたときに、サーバー側でスクリプトを実行し、その結果を返すという仕組み。
	MySQLやOracleといったさまざまなデータベースに対応しており、データベースを扱うWebアプリケーションの開発が容易であるという特徴がある。
Ruby
	1993年にまつもとゆきひろ氏が開発したオブジェクト指向のスクリプト言語。テキスト処理能力に優れており、Perlからの乗り換えユーザーが多い。はじめからオブジェクト指向言語として開発されているため、データ構造はすべてオブジェクトとして扱われ、
	オブジェクトに対するインターフェースが統一されているなどの特徴を持つ。UNIX、Linux、Windows、Mac OSといった、主要なOSで利用できる。
	
■ サーバーソフト

Apache
	世界一のシェアをもつWWW(World Wide Web)のサーバ用ソフトウェア。米国の非営利団体でありネット上の仮想的な組織である「Apacheソフトウェア財団」が開発に携わっており、無料配布されソースコードも公開されている、オープンソース・ソフトウェアの一つ。Apache開発プロジェクトの始まりは、
	ウェブサーバソフト「NCSA」を改良した「Apache 0.2」が公開された1995年。国際市場シェアは2012年7月現在、61.45パーセントとなっている。
	標準的なWebサーバーソフトで、フリーソフトウェアとして無償で配布されている。プロキシー機能、SSL対応などの機能をモジュールとして追加できるという利便性を持つ。

nginx
	ロシアのイゴール・シソエフ（Igor Sysoev）氏によって開発が創始されたオープンソースソフトウェアで、BSDライセンスに似たライセンスで提供されており、誰でも自由に入手・改変・再配布することができる。
	Linuxなど主要なUNIX系OSおよびmacOS、Windowsなどに対応している。nginxとは、オープンソースのWebサーバソフトウェアの一つ。大規模な配信環境を想定した設計となっており、リバースプロキシやキャッシュサーバ機能を標準で内蔵する。
	「エンジンエックス」（engine x）と発音する。並行処理とメモリ消費の抑制を重視した設計で、同時アクセス数が増えても安定的に動作する。HTTPサーバやSSL/TLSによる暗号化などの基本的な機能の他に、
	サーバの代理として動作するリバースプロキシやHTTPキャッシュ、サーバ間で負荷を分散するロードバランサ（負荷分散）などの機能を持っている。メールサーバ（SMTP/POP3/IMAP4）のプロキシサーバとしても動作する。
	多くの機能がモジュール（部品）化されており、不要な機能を外して軽量化したり、第三者が開発・公開しているモジュールを取り込んで機能を強化したり、独自の機能を実装したモジュールを開発して追加することができる。

IIS
	マイクロソフト社が開発したWindows用のWebサーバー・ソフト。Windows NT ServerおよびWindows 2000 Serverには標準で付属していた。現在は、Webサーバーというより、同社の.NETに対応したアプリケーションサーバーとしての役割が増している。
	なお、Windows NT 4.0 Option Packに含まれていたバージョン4.0以前は「Internet Information Server」の略だったが、OSに統合された5.0以降に現在の名称に変更されている。

■ SQL
SQL
	リレーショナルデータベース管理システム（RDBMS：Relational Data Base Management System）において、データベースを照会するための専用プログラミング言語のこと。
	データの抽出をはじめ、変更や削除なども行う。
	1976年にIBM社が開発した。その後、1986年にANSI（アメリカ規格協会）によって標準化され、翌1987年にはSQL87としてISO（国際標準化機構）規格になった。
	その後もISOで標準化が進められ、SQL89、SQL92、SQL1999、SQL2003、SQL2006、SQL2008、SQL2011などの規格が制定された。日本でもJIS規格になっている。
	IBMではSQLをStructured Query Languageの頭文字としていたが、ISOではとくになんらかの略語ではないと規定している。エス・キュー・エルと読むのが一般的だが、シークェルともいう。
	データ形式を定義して統合的に管理するデータベースのなかで、もっとも利用されているのがリレーショナルデータベース（RDB）である。これは、データを表形式のテーブルで表すとともに、複数の表を関連づけられるという特徴がある。
	それを管理するシステムがRDBMSで、そこで標準的に使われる言語がSQLである。そのため、SQLを利用することでどのRDBでも同じように操作できることになる。
	言語としては、テーブルの作成などを行うデータ定義言語（DDL：Data Definition Language）、データの整合性を保つためのデータ制御言語（DCL：Data Control Language）、
	データベース構築後にデータの検索や修正、追加、削除などを行うデータ操作言語（DML：Data Manipulation Language）の三つで構成されている。
	SQLを利用するおもな製品に、Oracle(オラクル)、DB2、Microsoft(マイクロソフト) SQL Server、MySQL(マイエスキューエル)などがある。
	
DB2
	Db2とは、米IBM社のリレーショナルデータベース管理システム（RDBMS）および関連ソフトウェアのブランド名。
	同社のAIXをはじめとする各種UNIX向けやLinux向け、Windows向け、また、同社のメインフレームOS（z/OSやOS/400など）向けが用意されており、幅広いプラットフォームに対応している。
	同社の販売するシステム製品のデータ管理基盤として採用されることが多く、大企業や官庁などの大規模システム、基幹システムでの利用が多い。特に同社製メインフレーム製品でデータベースシステムを構築する場合はほとんどがDb2ベースとなる。
	Db2に様々な機能を追加する関連ソフトウェアが数多くリリースされており、全体を総称して「Db2ファミリー」と呼ばれることもある。同社ではDb2シリーズのほかに、米インフォミックス（Informix）社の買収で手に入れた「Informix」データベース管理システムおよび関連製品群がある。
	最初の製品は1983年に当時のMVS向けに開発され、当初は「DB2」と称された。1990年代にUNIX版、Linux版、Windows版が追加された。2000年代前半には「DB2 UDB」（Universal Database）に改称されたが程なくして「DB2」に戻った。2017年以降は「Db2」とBが小文字表記に変更されている。
MySQL
	MySQLは、オープンソースのリレーショナルデータベース管理システム（RDBMS）です。
	世界でもっとも普及しているオープンソースのRDBMSとして知られており、2009年における利用企業数割合は世界が82.1％、日本が60.5％と圧倒的な数値を算出しています。
	Drupal、Joomla、phpBB、WordPressなどのデータベース駆動型WEBアプリケーションの他、Facebook、Flickr、MediaWiki、Twitter、YouTubeといったWEBサイトでも使用されています。
	名前の由来は共同設立者のMichael Widenius氏の娘の名前である“My”とStructured Query Languageの略称“SQL”を組み合わせからきています。
	“SQL”の部分はデータベース言語のSQLを指します（※）が、これまでの説明でわかる通りMySQLはRDBMSでSQLとはまったく別の存在であるため、混同しないように注意しましょう。
	※国際標準の規格票内では、“SQLは何かの略語ではない”と言明されています。
	しかし、SQLが“structured query language”と紹介されることもあり、RDBMSの製品におけるSQLにおいては正しいとされています。
Maria DB
	MariaDB は、MySQL から派生したオープンソースのリレーショナルデータベース管理システム（情報を効率的に管理できるシステム）で、いわば MySQL の妹分に当たります。
	これまでレンタルサーバーで主に使用されていたのは MySQL ですが、今後はこの MariaDB が主流になっていくと考えられています。
	実際すでに、Google がシステムに MariaDB を採用しているほか、Fedra、Red Hat、CentOS や Debian など、Linux の主要なディストリビューションも、データベースを MySQL から MariaDB に移行しています。
	MariaDBは、もともと MySQL のオリジナルコードの作者でもある Michael “Monty” Widenius によって作られた、MariaDBプロジェクトによって作成されています。また、プロジェクトには Widenius 以外にも MySQL に関わっていたメンバーが多数参加しているため、MySQL 自体も更新は続けていますが、ある意味 MySQL の正当な後継と言っていいかもしれません。
	なお、MySQL の名称である “My” は、Widenius の長女の名前から、MariaDB の “Maria” は次女の名前から取られていますので、まさに「妹」と言って差し支えない存在ですね。また、Widenius は、長男の名前 “Max” も “MaxDB” として用いています。（Max は前妻との子供、My と Maria は2番目の妻との子供だそうです）
Oracle DB
	Oracle Databaseとは、オラクル社が開発、販売しているリレーショナル・データベース管理システム（Relational Database Management System/RDBMS）のことです。
	世界初の商用RDBMSであり、メインフレームからパーソナルコンピュータまで、幅広いプラットフォームをサポートしています。
	1979年にOracle 2が発表されて以降、変化する顧客ニーズとIT環境に合わせて機能拡張を続けています。
PostgreSQL
	PostgreSQLとは、リレーショナルデータベース（RDB）の作成や操作、管理ができるオープンソースのデータベース管理システム（DBMS）の一つ。MySQLと人気を二分するオープンソースRDBMSで、Linuxなど主要なUNIX系OSとWindowsに対応し、機能の豊富さや拡張性の高さに定評がある。
	RDBMSとしての基本的な機能として、SQL言語によるデータベースの作成や編集、データの読み書き、サブクエリ、結合、制約、トリガー、トランザクション、レプリケーション、バックアップなどに対応するほか、インデックスやデータ型、演算子、型変換など様々な要素をユーザー定義できる高い拡張性を備えている。
	INSERT文とUPDATE文を統合し一文で書けるUPSERT文（指定された条件に一致するレコードが既存ならUPDATE、存在しなければINSERT）など独自の新機能の追加にも熱心で、機能の豊富さから商用DBMSからの乗り換え先としても有力な選択肢となっている。
	ストアドファンクション（関数型のストアドプロシージャ）にも対応し、標準ではOracle DatabaseのPL/SQL互換のPL/pgSQL言語が組み込まれているほか、Perl（PL/Perl）やPython（PL/Python）、C言語による開発にも標準で対応し、外部開発の機能を追加すればJavaやJavaScript、R言語、シェルスクリプトなどでも開発できる。
SQLite
	SQLiteとは、オープンソースのリレーショナルデータベース管理システム（RDBMS）の一つ。他のソフトウェアに組み込んで利用することを想定した軽量な仕様が特徴。著作権が放棄されたパブリックドメインソフトウェアとして公開されている。
	他の多くのDBMSが単体で動作するサーバ型のソフトウェアなのに対し、SQLiteは主にソフトウェアに組み込まれてその一部として動作する。ソフトウェア開発者は自らDBMS機能を開発しなくてもSQLiteを組み込めば容易にソフトウェア内にDBMS機能を搭載できる。
	SQL文によるデータベースの操作のほか、トランザクション処理やトリガー、ビューなどの機能にも対応している。処理性能や現実的に扱えるデータベースの規模は本格的なDBMS製品に及ばないが、全体で数百KB程度とコンパクトで、携帯機器など記憶容量に余裕のない環境でも軽快に動作させることができる。
	データベースは単一のファイルにまとめられ、利用者がメンテナンスなどを行う必要はない。他のシステムにファイルを複製・移動するだけでそのシステムから読み書きが可能となる。ファイルを使わずインメモリデータベースとして動作させることもできる。
	データベースにはプログラム内からAPIなどを利用してアクセスできるほか、標準添付のコマンドラインツールでOSのシェルなどから利用者が直に操作することもできる。外部の開発者によってグラフィカル（GUI）な操作環境も公開されている。
	AndroidやAdobe AIRにはSQLiteがあらかじめ組み込まれているほか、プログラミング言語ではPHPやPythonが標準で対応している。他の多くの著名なプログラミング言語向けのライブラリなどもSQLite側が標準で用意しており、様々な環境に組み込んで使用することができる。
SQL Server
	SQL Serverとは、米マイクロソフト（Microsoft）社が開発・販売しているリレーショナルデータベース管理システム（RDBMS）。同社のオペレーティングシステム（OS）製品であるWindowsシリーズおよびLinuxで動作する。
	Windowsや同社の業務用ソフトウェア製品と緊密に連携して動作させることができ、Windows Server環境で構築された業務システムにおけるデータの保存・管理の基盤としてよく採用される。同社製品の中にはデータ管理用にSQL Serverを必要とするものもある。
	業務用の大規模環境での使用を想定して設計されたDBMS製品であり、複数台のコンピュータを統合してミラーリングやフェイルオーバー、クラスタリングなど可用性を高める構成を取ることができる。利用者の認証や権限管理、暗号化などセキュリティ機能も充実している。
	データベースの問い合わせには他のRDBMS同様SQL（Structured Query Language）を用いることができる。SQLを独自に拡張し、手続き型プログラミング言語に似た仕様を取り込んだ「Transact-SQL」（T-SQL）により、簡易なプログラムを作成して実行することもできる。
	使用環境や規模に応じて、EnterpriseやStandardなど機能や制約条件の異なる複数のエディションに分かれている。機能が制限された無償版のSQL Server Express（旧MSDE：Microsoft Database Engine）も提供されており、テスト環境や開発環境、簡易なシステムの組み込み用途などで用いられる。
	同社ではSQL Server以外にも、デスクトップ環境向けの「Microsoft Access」やクラウドサービスの「Azure SQL Database」などのデータベース製品を提供している。競合製品には米オラクル（Oracle）社の「Oracle Database」、米IBM社の「IBM Db2」などがあり、オープンソースの「MySQL」「PostgreSQL」ともよく比較される。
CRUD
	CRUDとは、永続的なデータを取り扱うソフトウェアに要求される4つの基本機能である、データの作成（Create）、読み出し（Read）、更新（Update）、削除（Delete）の頭文字を繋げた語。
	主にデータベースを応用したシステムやデータベース管理システム（DBMS）について用いられる語で、この4つに対応する機能を実装することで、システム上で自在にデータの操作や管理を行うことができるようになる。
	リレーショナルデータベース（RDB）に対する問い合わせ言語の標準であるSQLでは、テーブル上のレコードに対するCRUDのそれぞれに対応する操作を行う構文が用意されている。レコードの作成はINSERT文、読み出しはSELECT文、更新はUPDATE文、削除はDELETE文によって行う。
	様々な種類のデータを扱うシステムやソフトウェアを設計する際に、どの機能やプログラム（モジュール）が、どのデータを作成（C）・読み出し（R）・更新（U）・削除（D）するのかを表の形で整理したもの。
	機能やデータが複雑に分かれてるシステムでは、どの機能がどのデータに対してどのような操作を行う（必要がある）のかを把握するのが難しくなる場合がある。そのような場合に、横方向にデータやテーブルなどの種類を、縦方向に機能やモジュールなどを並べた表を作成し、それぞれが交差する項にCRUDのどれが該当するかを書き入れたCRUD図を作成することがある。
	各欄へのC/R/U/Dの記入方法には主に二通りの方法がよく知られており、各データ項目をC/R/U/Dの副項目に分割し、該当する欄に丸印などを書き入れる手法と、表中の各欄にC/R/U/Dのアルファベットのうち該当するものを直接書き入れる手法である。
トランザクション
	トランザクションとは、商取引、売買、執行、取扱、議事録などの意味を持つ英単語。ITの分野では、取引記録などの意味の他に、ソフトウェアの処理方式の一つで、互いに関連・依存する複数の処理をまとめ、一体不可分の処理単位として扱うことを指す場合が多い。
	データベースシステムや業務用ソフトウェアなどでよく用いられる概念で、金融機関のコンピュータシステムにおける入出金処理のように、一連の作業を全体として一つの処理として管理するために用いる。
	一体として管理された処理は「すべて成功」か「すべて失敗」のいずれかであることが保証される。例えば、資金移動システムをコンピュータで処理する場合、出金処理と入金処理は「どちらも成功」か「どちらも失敗」のどちらかであることが要求される。「出金に成功して入金に失敗」すると、出金された資金が宙に浮いてしまうからである。
	このような場合に、出金と入金をまとめて一つのトランザクションとして管理し、どちらか一方が失敗したらもう片方も取り消し、どちらも成功したときに初めて全体を成功として確定する。このような管理を専門に行うソフトウェアをTPモニタ（Transaction Processing monitor）という。
コミット
	コミットとは、確約する、誓約する、専心する、傾注する、委ねる、（過ちを）犯す、などの意味を持つ英単語。ITの分野では、処理や変更などを確定させる、反映させる、といった意味で用いられることが多い。
	トランザクション処理において、関連する処理がすべて成功し、結果を確定させることをコミットという。
	トランザクション処理では一体不可分な複数の処理が「すべて成功」か「すべて失敗」のいずれかになるよう制御している。すべての処理が成功し、データベースの状態を処理結果によって更新することをコミットという。
	一方、途中でいずれかの処理が失敗し、完了済みの処理をすべてキャンセルしてトランザクション開始前の状態に戻すことをロールバック（rollback）という。
	いくつかのバージョン管理システム（VCS）では、利用者が手元で編集・更新したファイルの内容をリポジトリに反映させる処理のことをコミットという。「コミットする」のように動詞として用いることもある。
	一般的なVCSでは一つのプロジェクトに関連する複数のファイルをリポジトリと呼ばれる専用のファイル保管領域で管理しており、利用者はリポジトリからファイルを取得して内容を編集する。編集したファイルをリポジトリへ登録することをコミットと呼び、そのファイルの最新バージョンとしてリポジトリに保管される。
ロールバック
	ロールバックとは、後退、巻き戻し、撤退、引き下げ、巻き返し、反撃などの意味を持つ英単語。情報システムの分野では、システム障害やデータの喪失、破損などが起きた際に、以前に正常に稼働していたある時点の状態に戻して復旧を試みることを指す。
	ある時点の正常な状態のデータやプログラム、設定などを複製してまとめて保管しておき、障害などが発生した時にこれをシステムに書き戻してその時点の状態に戻す。特にデータベースシステムのトランザクション処理でよく用いられる概念で、障害発生時に処理途上でコミットされていないトランザクションの処理をすべて取り消し、最初の時点に戻すことを意味する。
排他制御（排他ロック）
	排他制御とは、複数の主体が同じ資源を同時に利用すると競合状態（race condition）が生じる場合に、ある主体が資源を利用している間、別の主体による資源の利用を制限もしくは禁止する仕組みのこと。
	例えば、あるプログラムがストレージ上のあるファイルに書き込みを行なっている最中に、並行して実行されている別のプログラムがそのファイルへの書き込みを開始してしまうと、ファイルの内容が破壊され整合性のないものになってしまう。
	このような事態を防ぐために、ファイルへの書き込みが行われている間は別のプログラムによる書き込みを禁止するという制御が行われる。このような制御は「ロック」（lock）と呼ばれ、最も有名な排他制御の方式の一つである。
	排他制御は割り込み禁止機構などのハードウェア上の機能を利用して実装する場合と、プログラムの実行制御によりソフトウェア的に実装する場合がある。オペレーティングシステム（OS）やライブラリなどの中には、これを利用するプログラムに対して何らかの同期機構を提供するものもある。
	OS上のプロセスやプログラム上のスレッド間でロック機構を実現する方式として「ミューテックス」（mutex）がよく用いられる。また、資源が複数個ある場合の排他制御として、プロセスが資源へのアクセスを開始・終了する度に利用可能な残り数を増減させる「セマフォ」（semaphore）が用いられることもある。
楽観ロック
	楽観ロック/悲観ロックとは、並行して複数の主体が共有資源を利用する際の排他制御（ロック）を、どのような前提に基づいて実施するかを表す分類。楽観ロックは処理途上で滅多に他の主体が資源を更新しない前提、悲観ロックは頻繁に更新されうる前提に立つ。
	楽観ロック（楽観的ロック）では、ある主体（利用者やプログラムなど）がシステムの共有資源（共有メモリ領域やデータベースの特定のレコードなど）にアクセスする際、資源を外部から利用できないようアクセス禁止にはしない。
	処理が終わり資源を更新する際、読み込み時から誰かが変更したかどうかを調べ、変更があれば更新は行わずに結果を破棄して処理失敗を宣言する。変更されていなければ結果を書き戻して処理完了とする。
	処理の最中に参照している資源が書き換わってしまうことは滅多に起こらない前提に立ったロック方式で、資源のアクセス禁止や他の主体への通知といった仕組みが不要、他の主体に待ち時間が生じない、ロックの解放漏れが起きないなどの利点がある。
	変更があったか確認する方法として、データが短い場合はそのものを比較することもあるが、更新時にタイムスタンプを記録して照合する方式、更新時にバージョン番号を増やすようにして値が一致するか調べる方式などが用いられることがある。不運にも途中で変更が行われると処理失敗になってしまうため、処理のやり直しが可能で、やり直しがあまり負担にならない場合によく用いられる。
悲観ロック
	悲観ロック（悲観的ロック）では、ある主体がシステムの共有資源を利用して処理を行っている最中に、頻繁に他の主体からの参照や変更の要求が行われる前提に立ち、処理開始時に他の主体によるアクセスを禁じる。
	処理が終わり資源の更新を行ったあと、ロックを解除して他の主体が利用できるよう解放する。処理中に他の主体が資源を書き換える心配がなく確実に処理を完遂できるが、処理中は他の主体を待たせることになり、処理の異常で解放が正常に行われないとロックされたままになってしまうことがある。
	資源へのアクセスを禁じる機構や、待っている他の主体に空いたこと知らせる機構などを整備する必要があり、アプリケーションが個別に実装することは難しいことが多いため、OSやDBMSなどプラットフォーム側の機能として提供されるのが一般的である。
実行計画
	実行計画とは、SQLserverがユーザーが発行したSQLを解析し決定した実データに対して、どのようにアクセス・計算を行うかが記載されている計画書です。 SQLはDBの「どの」データを取得するかをユーザーが指定しますが、「どのように」そのデータを探して取得するかはSQLserverのオプティマイザ機構が決定します。
チューニング
	チューニングとは、調整、調律、同調などの意味を持つ英単語。日本語の外来語としては、楽器の音の高さの調律・調弦や、無線通信や放送などで、受信したいチャンネルの電波周波数に機器を同調させる操作などを指すことが多い。
	ITの分野では、情報システムやコンピュータ、ソフトウェアなどの設定や構成を調整し、目標の状態に近づけたり、性能を最大限引き出したりする作業を指すことが多い。性能の計測や実行状態の監視、問題点やボトルネックの特定、問題を緩和・回避するための設定や構成の変更などの一連の作業から成る。
	多くの場合、既存の状況から機材の変更・増強やソフトウェアの変更・改修などの根本的な部分の改変は行わず、設定変更などを通じて使用状況に適した状態へ調整するというニュアンスで用いられる。
パフォーマンス
	パフォーマンスとは、性能、能力、実績、業績、成果、成績、実行、遂行、演技、演奏、公演、行動などの意味を持つ英単語。ITの分野では、コンピュータなどの機器やソフトウェア、システムなどの処理性能や実行速度、通信回線・ネットワークなどの伝送速度・容量などのことを指すことが多い。
スロークエリ
	スロークエリとは、データベース管理システム（DBMS）に対する問い合わせ（クエリ）のうち、一定の基準に照らして遅い、時間がかかっているもの。システム性能の制約となるボトルネックとなっている可能性が高い箇所とみなされる。
	リレーショナルデータベース（RDB）では、アプリケーション側からDBMSに対してSQLと呼ばれる言語で記述されたクエリを発行し、データの照会や更新などの依頼を行う仕組みになっている。アプリケーションから発行され処理されたクエリのうち、実行時間が一定の基準を超える遅いクエリのことをスロークエリという。
	実行時間はシステムの種類や構成、性能などに依存するため一律の基準があるわけではなく、管理者がDBMSの設定などで「1秒以上」といった基準値を指定することが多い。DBMSによってはMySQLのスロークエリログにように基準値を超えるスロークエリの実行を検知して記録する機能がある場合もある。
	クエリに時間がかかる原因は様々だが、巨大なテーブルを毎回フルスキャンするなどデータベースの設計やクエリの記述に問題がある場合、システムの性能に対して過大な処理要求が生じストレージ装置などの処理が飽和状態になって遅延している場合などがよく見られる。
クエリログ
	一般クエリログ (General query log) は、クライアントからの MySQL Server への接続・接続解除の情報、およびクライアントから実行された全ての SQL クエリを出力してくれるログです。 SQL 実行エラーが発生した際に、どのような SQL が実行されたのかを正確に把握するのに役に立ちます。
IDE（統合開発環境）
	IDEとは、ソフトウェア開発に必要なソフトウェアを一つに組み合わせ、同じ操作画面から統一的な操作法で利用できるようにしたソフトウェアパッケージ。一般的にはコードエディタやコンパイラ、リンカ、デバッガ、テストツール、バージョン管理ソフトなどで構成される。
	プログラムのソースコードを記述するためのコードエディタを中心に、ソフトウェアの操作画面の設計や要素の配置、挙動の指定などを支援するGUIデザイン機能、ライブラリや開発中のクラスなどの仕様や内部構造を表示する機能、コンパイラやリンカを呼び出して実行可能ファイルを構築するビルド機能、ステップ実行やインスペクション、エラー箇所のハイライト表示などテストやデバッグを支援する機能などを持っていることが多い。
	ソフトウェア開発を支援する補助的な機能として、コードとともにデータやドキュメントなどを一括して管理するプロジェクト管理機能や、ファイルの新旧の版管理や複数人による編集を管理するバージョン管理機能、複数の開発者の連携を補助するチーム開発機能などを持つものもある。
	プラグインなどの拡張機構を用いて、後から対応言語や機能を増やすことができるものもある。特定の製品や技術を対象としたプログラムを開発するためのソフトウェア開発キット（SDK：Software Development Kit）が著名なIDEに対するプラグインの形で提供されることも多い。
	コードエディタは一般的なテキストエディタとして機能に加え、入力途中の文字列から予約語や関数名、プロパティ名、メソッド名などの候補を推測して自動的に提示してくれるコード補完機能や、予約後や区切り文字などを認識して色分けして見やすくする機能、コンパイルエラーなどが発生した場所をエラーメッセージ等とともに強調表示する機能など、コード記述に特化した便利な機能が盛り込まれていることが多い。
	特定の環境や対象、プログラミング言語向けのIDEとして、米マイクロソフト（Microsoft）社の「Visual Studio」（Windows向け）や、米アップル（Apple）社の「Xcode」（macOS/iOS向け）、ジェットブレインズ（JetBrains）社の「IntelliJ IDEA」（Java言語向け）などがよく知られる。オープンソースソフトウェアの「Eclipse」（エクリプス）のように様々な言語や環境で汎用的・横断的に利用されるものもある。
Eclipse
	Eclipseとは、Javaを始めとする様々なプログラミング言語によるソフトウェア開発に対応した、オープンソースの統合開発環境（IDE）の一つ。
	主にJavaによる開発環境として開発され、Eclipse自身もJavaで記述されているため、Java仮想マシン（Java VM）が動作する様々な機種やOS上で同じように動作する。
	Java開発に必要な機能の多くが同梱されており、独自のJavaコンパイラ（ECJ：Eclipse Compiler for Java）も添付されているほか、単体テストツールJUnitやビルドツールAntなどJava開発で標準的に用いられる外部ツールと連携することができる。
	OSGi仕様に準拠したEquinoxと呼ばれる強力なプラグイン機構を備え、Javaで記述されたプラグインを導入して機能を拡張することができる。多言語対応やデバッグ支援、テストツール、コードエディタの拡張、UML作図ツールなどの追加機能のほか、Webアプリケーションサーバやクラウドサービス、バージョン管理システムなど外部との連携のためのプラグインも公開されている。
	また、Java以外の様々なプログラミング言語による開発を可能にするプラグインも豊富に用意されており、C言語/C++言語、JavaScript、PHP、Perl、Ruby、Pythonなどによる開発が可能となる。実際にはJava開発の機能も標準で同梱されるプラグインの形で実装されている。
	Amazon Web Services向け開発のためのAWS Toolkit for Eclipseや、Android向け開発のためのAndroid Development Toolkit（ADT、現在はIntelliJ IDEAベースのAndroid Studioに移行）のように、あるプラットフォームの公式の開発キット（SDK：Software Development Kit）がEclipseプラグインの形で提供される場合もある。
	EclipseはIBM社が1999年にクロスプラットフォームのJava開発環境として開発したもので、2001年にオープンソースソフトウェアとして公開され、2004年には同社から新たに設立された非営利団体Ecllipse Foundationに移管された。
NetBeans
	NetBeansは、プロジェクト管理機能や入力支援機能を備えたオープンソースのIDEです。Integrated Development Environment（統合開発環境）
	Javaアプリケーション開発の統合環境として開発が始められたNetBeansですが、現在ではJavaのみならずJavaScriptやPHP、CおよびC++など、多くのプログラミング言語をサポートしています。Java EEなどJavaによるWebサービス開発のための環境も用意されています。
SpringToolSuite
	STSはSpring Framwrowkの開発元が提供しているEclipseをベースとして作成された統合開発環境(IDE)で、Spring Frameworkを利用した開発に適した機能が備えられている。
DBツール
	データベース・ツールとは、データベース管理タスクに使用できるツール、ユーティリティおよび補助ツールの総称です。 類似するタスクを実行できるデータベース・ツールもありますが、1つのデータベース・ツールですべてのデータベース管理タスクを実行することはできません。
A5:SQL Mk-2
	A5:SQL Mk-2は複雑化するデータベース開発を支援するために開発されたフリーのSQLクライアントです。
 	高機能かつ軽量で、使い方が分かりやすいことを目標に開発されています。
 	SQLを実行したり、テーブルを編集するほかに、SQLの実行計画を取得したり、ER図を作成したりすることが出来ます。
pgAdmin
	pgAdminとは、PostgreSQLの管理ツールの一つで、ネットワークを通じて遠隔のデータベースサーバをグラフィカルな表示・操作体系（GUI）で管理することができるもの。オープンソースとして公開されている。
	PostgreSQLはMySQL/MariaDBと人気を二分するオープンソースのリレーショナルデータベース管理システム（RDBMS）の一つで、基本的な管理や操作は導入したサーバ上で設定ファイルを記述・編集したり、シェルからコマンドを入力することによって行う。
	pgAdminはサーバとは異なるコンピュータ上に導入し、ネットワークを通じてサーバに接続してデータベースの設定や操作を行うことができる。DBMSの設定の表示や変更、稼働状況の把握、テーブルの作成、データの追加、書き換え、削除などをグラフィックを多用した見やすい画面を通じて行うことができる。
	サーバ側にはpgAdminによる操作を受け付けるようにするための設定変更が必要で、最新のpgAdmin 4シリーズはサーバ側で動作するアプリケーションの導入も必要。動作環境はLinuxやWindows、macOSなどで、pgAdmin 4からはWebアプリケーション化されたため、Chromeなど主要なWebブラウザが動作する環境ならばOSは不問となった。	
DBeaver
	DBeaverは、SQLクライアントソフトウェアアプリケーションおよびデータベース管理ツールです。リレーショナルデータベースの場合、JDBCアプリケーションプログラミングインターフェイスを使用して、JDBCドライバーを介してデータベースと対話します。他のデータベースの場合は、独自のデータベースドライバーを使用します。
MySQL Workbench
	ySQL Workbenchは、SQL開発、管理、データベース設計、作成、および保守をMySQLデータベースシステムの単一の統合開発環境に統合するビジュアルデータベース設計ツールです。
Sequel Pro
	Sequel Proは、Macユーザーにとって無料で使えるMySQLデータ管理ソフトとして重宝されています。 基本的な機能を兼ね備えているので使い勝手が良いのが魅力。 ... Sequel ProはMac専用ですが、Windowsと互換性のある管理ソフトや有料でさらに高機能な管理ソフトもあります。	
TeamSQL
	TeamSQLは、完全無料を謳っているDBをGUIで管理する為のソフトウェアのひとつです。 同カテゴリのソフトウェアとしては他に、phpMyAdminやMySQL Workbench、HeidiSQLなどがあります。
■ 肩書
PM	プロジェクトマネージャとは、プロジェクトの計画・遂行に責任を負う管理者。また、そのような職位や職能。
	定められた期限までにプロジェクトの目標を達成するため、与えられた予算や人材、設備、物資などを用いて実施計画を立て、適宜修正しながら進捗の管理を行う。このようなプロジェクトの管理業務を「プロジェクトマネジメント」（PM：Project Management）という。
	進行の遅延や中断を引き起こすリスクの洗い出しや影響の見積もり、対応方針の策定や、顕在化した問題への対処、プロジェクトオーナー（顧客）など外部の利害関係者（ステークホルダー）との連絡や調整の窓口など、プロジェクトを円滑に進めるための諸業務を担う。
	また、プロジェクトチームの中心として、メンバー間の情報共有や意思疎通、議論や意思統一、仕事の割当や指示、進捗状況や問題の把握など、チームを目標に向けて一つにまとめることも重要となる。
PL
	プロジェクトリーダーとは、プロジェクトを遂行するチームの責任者。また、比較的大規模なプロジェクトにおいて、プロジェクトマネージャを補佐し、現場の業務の実施・遂行に責任を持つ監督者。
	厳密な定義が決まっている用語ではないため、組織や文脈によって意味が異なるが、比較的小規模な組織では、プロジェクトの唯一の責任者として、プロジェクトの計画・管理・遂行の全般に責任を持つ役職とされることが多い。
	プロジェクトリーダーにはメンバーを統率するリーダーシップや、メンバーの人心を掌握し士気を高めるコミュニケーション能力、予算やスケジュールの把握や組み立てを行う管理能力、チーム内や外部との間で意見や利害をすり合わせる調整能力など、総合的な組織運営能力、経営能力が求められる。
PG（PE）
	プログラマとは、プログラミング言語やソフトウェア開発ツールなどを用いてコンピュータプログラムを作成・修正する技術者のこと。
	プログラムの構想や設計、プログラミング言語によるコードの記述、コンパイルやリンクなど実行可能プログラムや配布パッケージの生成（ビルド）、動作検証（テスト）、不良箇所の修正（デバッグ）など、ソフトウェアを完成させるまでの一連の工程の一部または全部に携わる人や職種を意味する。
	狭義にはプログラムコードの記述（プログラミング）を行う人をさすが、それ以外にどの部分まで関わるかはソフトウェア全体の開発体制によって異なる。個人開発であればこれらすべての作業を一人で行うが、企業などで工程間の分業が進んでいれば、プログラマの担当作業はコード入力のみの場合もある。
	システム開発の大手企業などでは、システムエンジニアなどがプログラムコードとほぼ一対一に対応する詳細な処理の流れなどを記した設計書などを作成し、これを特定の言語による記述に置き換える作業者のことをプログラマと呼んでいる場合がある。このような工程を「コーディング」（coding）、作業者を「コーダー」（coder）と呼ぶこともある。
SE
	システムエンジニアとは、情報システムの企画、設計、開発、試験、構築、導入、運用、更新、修正、廃棄などに携わる技術者の総称。狭義には、ソフトウェアの開発に携わる技術者のうち、プログラミング以外の業務を担当する者のこと。
	正式・公式な定義などは存在せず、組織や文脈によって大きく意味が変動する用語だが、一般的には、ソフトウェア開発プロジェクトなどで、予算や人員、進捗などの管理（プロジェクトマネジメント）を行なう管理者や、いわゆる上流工程で、システム化対象業務の分析やシステムの要件定義、設計などを担当する技術者のことを指すことが多い。
デザイナー
	服飾・建築・商業・工業などの分野でデザインを担当する人。デザインの専門家。
エンジニア
	機械・電気・土木・建築などの技術者。技師。	
フロントエンド・エンジニア
	フロントエンドエンジニアとは、情報システムやWebサイトを開発する技術者のうち、利用者への表示や操作の受け付けを行う部分を担当する職種のこと。特に、WebサイトやWebサービスの開発で、Webブラウザ側に展開されるコードの開発を行うエンジニアのこと。
	HTMLやCSS、JavaScript、画像ファイルなどを組み合わせてWebアプリケーションのクライアント側を開発するエンジニアのことで、従来はHTMLコーダー、マークアップエンジニア、JavaScriptプログラマなどと呼ばれていた職種を包含する。
	狭義にはJavaScriptによるクライアント側プログラムの開発者を指す場合もあり、その場合はHTMLやCSSなどによるマークアップやスタイル指定などはWebデザイナーやコーダーなどに任される。
	また、文脈によってはフロントエンドエンジニアという個別の職種自体があるわけではなく、これらの職種の総称を意味することもある。また、企業によってはWebページのデザインや画像素材の作成などWebデザイナーとしての業務を含む場合もある。
サーバーサイド・エンジニア
	サーバーサイドエンジニアとは読んで字の如く、サーバー側で動作するプログラムの開発やデータ処理などをおこなうエンジニアの事を指します。 Webサービスやショッピングサイト、業務システムなどが動作する裏側のシステムを開発するためバックエンドエンジニアとも呼ばれます。
バックエンド・エンジニア
	サーバ側プログラムやデータベースなど利用者が直接触れない部分を開発する技術者は「バックエンドエンジニア」（back-end engineer）と呼ばれる。PHPやASP、JSPのようにWebページの雛形に埋め込まれてサーバ側で実行されるプログラムはバックエンド側の担当とされることが多いが、Webページ生成のための処理であるためフロントエンド側とされることもある。
■ UI（ユーザーインターフェース）
UI
	ユーザーインターフェースとは、機器やソフトウェア、システムなどとその利用者の間で情報をやり取りする仕組み。システムから利用者への情報の提示・表示の仕方と、利用者がシステムを操作したり情報を入力したりする手段や方式、機器、使い勝手などの総体を表す。
	コンピュータの主なユーザーインターフェースは、ディスプレイ装置などの画面表示、マイクやスピーカー、イヤフォンによる音声入出力、キーボードなどによる文字入力、マウスやペンタブレット、タッチパネル、ジョイスティックなどによる（画面上の）位置や方向の入力、カメラなどによる画像・映像入力、およびこれらの組み合わせによって構成されることが多い。
	現代のコンピュータのユーザーインターフェースは大きく分けて、文字による表示や入力を基本とするCUI（Character User Interface：キャラクタユーザインターフェース）あるいはCLI（Command Line Interface：コマンドラインインターフェース）と、絵や図形による表示、画面内の位置を指示することによる操作を基本とするGUI（Graphical User Interface：グラフィカルユーザインターフェース）の二種類がある。
CUI
	CUIは主にキーボードからコンピュータへの命令（コマンド）を文字により入力し、コンピュータは応答や処理結果を画面に文字で表示する方式で、歴史が古く、慣れれば効率よく操作することができ、また、操作の一部を自動化しやすいことから、現在もコンピュータに詳しい人や技術者など専門家がよく利用する。
GUI
	GUIはコンピュータの性能・機能が向上し、グラフィック表示やマウスなどが利用できるようになった1980年代頃から普及し始めたもので、専門家でない人やコンピュータに詳しくない人でも直感的に使用できることから、一般に販売されるパソコンや携帯端末などの多くで採用されている。近年では画面に指などで触れて対象や位置を指示するタッチパネルを利用したユーザーインターフェースシステムが携帯電話を中心に普及している。
■ ファイル／ディレクトリ
ファイル
	ファイルとは、コンピュータにおけるデータの管理単位の一つで、ストレージ装置（外部記憶装置）などにデータを記録する際に利用者やOSから見て最小の記録単位となるデータのまとまり。
	利用者がコンピュータを用いて記憶媒体にデータを保存、読み込み、移動、削除などする際に一つのまとまりとして取り扱うデータの集合を表し、OSの一部であるファイルシステム（file system）によって管理される。ハードディスクやSSD、USBメモリ、光学ディスク（CD/DVD/Blu-ray Disc）などの記憶装置・媒体を利用する際に用いられるほか、コンピュータと周辺機器の間やコンピュータ間の通信においてもデータの送受信単位として利用されることが多い。
拡張子
	拡張子とは、コンピュータのストレージ（外部記憶装置）に記録されたファイル名のうち、「.」（ドット/ピリオド）で区切られた右側の部分。「新しいテキスト ドキュメント.txt」というファイル名の拡
	拡張子はファイルの種類や形式を表すために利用者やソフトウェアによって付与されるもので、慣習的に1～4文字程度の半角英数字の組み合わせが用いられることが多い。現代のOSのほとんどでは文字数や文字種に制限はないが、MS-DOSには半角3文字までの制約があったため、後継のWindowsでも習慣的にドットを除いて3文字の拡張子が多い。
	UNIX系OSなどでは利用者やソフトウェアの便宜のために付けられるだけでシステム上の動作を指定するような特別な意味はないが、WindowsやmacOS（Mac OS X）ではファイルを指定して開くよう指示すると拡張子を元に関連付けられたアプリケーションソフトを自動的に起動するといった機能に用いられる。
	これらのOSでは特殊な用途のシステムファイルなどを除いて原則としてすべてのファイルに拡張子が付与され、OSの設定として拡張子とソフトウェアの対応関係が管理されている。拡張子はファイル名本体と同じで利用者が自由に変更できるが、みだりに変更すると正しいソフトウェアで開けなくなる場合がある。近年では拡張子をデスクトップ画面などで表示しない設定が既定となっていることが多いため、利用者が意識しないことも多い。	
ディレクトリ
	ディレクトリとは、電話帳（phone～）、住所録、名鑑、要覧、指導書、規則集などの意味を持つ英単語。IT関連では、多数の対象をその所在などの情報と共に一覧できるよう整理したものを意味することが多い。
ルート・ディレクトリ
	ルートディレクトリとは、コンピュータがストレージ（外部記憶装置）の内容を整理するファイルシステムにおいて、装置やシステム全体の最上位のディレクトリのこと。すべてのファイルやディレクトリはルートディレクトリを根（root）とする木構造のディレクトリ階層のいずれかに収まっている。
	今日一般的なコンピュータのファイルシステムでは、ストレージの内部にファイルを格納するディレクトリ（directory）と呼ばれる領域を任意に作成することができる。ディレクトリの中にディレクトリを、さらにその中にディレクトリを作ることもでき、ディレクトリ構造全体は上位階層から下に向かって順に枝分かれしていく木構造
	（ツリー構造）となる。この中で、最上位のある唯一のディレクトリのことをルートディレクトリという。
カレント・ディレクトリ
	カレントディレクトリとは、実行中のソフトウェアなどがストレージ（外部記憶装置）のファイルシステム中で現在位置として指し示しているディレクトリのこと。相対パスでファイルやディレクトリなどを指定する際の基準の位置となる。
	シェルやコマンドラインインタプリタなど主にOSへの操作を受け付けるソフトウェアが内部的に持つ状態の一つで、ストレージのファイルシステムを（UNIX系OSではストレージ以外のシステム上の資源も含む）階層構造で表したディレクトリツリーの中で、「今どこにいるのか」を表している。
	利用者がツリーの根本からの絶対位置である絶対パスを指定せずにファイルやディレクトリなどを指定すると、カレントディレクトリからの相対的な位置関係を表す相対パスであると解釈される。この仕組みにより、深い階層にあるファイルなどを指定する際にいちいち長い絶対パスを毎回入力しなくても、当該ディレクトリに「移動」すればファイル名を指定するだけでよくなる。
パス
	パスとは、小道、道筋、進路、通り道などの意味を持つ英単語で、ITの分野では、コンピュータ内で特定の資源の所在を表す文字列のことをパスという。ストレージ（外部記憶装置）内でファイルやディレクトリ（フォルダ）の位置を表すのに用いられるが、他の用途でも使われる。
	ストレージの内部は、多数のファイルをグループ分けして整理しやすいように、複数のファイルを格納できる「ディレクトリ」（directory）が多段階の入れ子状になった構造になっている。これを階層構造と捉えて、最上位から順にディレクトリ名を並べて記したものがパスである。
絶対パス
	絶対パスとは、ファイルなどの所在を書き表すパス（path）の表記法の一つで、階層構造の頂点（最上位階層）からの位置関係を記述する方式。
	現在位置とは無関係に、ドライブやシステムの最上位ディレクトリ（ルートディレクトリ、ルートフォルダ）から目的のディレクトリ（フォルダ）やファイルまでの道筋を省略なくすべて記述する方法で、途中にあるディレクトリを区切り記号で繋いで並べる。
相対パス
	相対パスとは、ファイルなどの所在を書き表すパス（path）の表記法の一つで、現在位置からの相対的な位置関係を記述する方式。起点となる位置から目的の位置までの道筋にある要素を順に並べて記述する。
	システムが現在操作対象としているカレントディレクトリ（カレントフォルダ）を起点に、指し示したいディレクトリやファイルの相対位置を記述する方法で、途中にあるディレクトリを区切り記号で繋いで並べる。区切り記号はWindowsの場合、日本では「￥」（円記号、実際には半角文字）、海外では「＼」（バックスラッシュ、同）を用い、UNIX系OSやWebサーバなどでは「/」（スラッシュ）を用いる。
■ ネットワーク
LAN
	LANとは、限られた範囲内にあるコンピュータや通信機器、情報機器などをケーブルや無線電波などで接続し、相互にデータ通信できるようにしたネットワークのこと。概ね室内あるいは建物内程度の広さで構築されるものを指す。
	銅線や光ファイバーなどを用いた通信ケーブルで機器間を接続するものを「有線LAN」（wired LAN）、電波などを用いた無線通信で接続するものを「無線LAN」（wireless LAN）という。有線LANの通信方式としてはいわゆる「Ethernet」（イーサネット/IEEE 802.3）系諸規格が、無線LANの通信方式としてはいわゆる「Wi-Fi」（ワイファイ/IEEE 802.11）系諸規格がそれぞれ標準として普及しており、単にLANといった場合はこれらの方式を用いたネットワークを指すことが多い。他にも建物内に電気を供給するために張り巡らされた電力線を流用して通信する方式などがある。
WAN
	WANとは、地理的に離れた地点間を結ぶ通信ネットワーク。建物内や敷地（キャンパス）内を結ぶLAN（Local Area Network）と対比される用語で、通信事業者が設置・運用する回線網のことを指すことが多い。
	また、通信事業者の回線網を通じて複数の拠点間のLANを相互に結び、全体として一つの大きなネットワークとした企業内ネットワークのことをWANと呼ぶこともある。	
	文脈によっては、世界の通信事業者、企業、各種組織などのネットワークを相互に結んだものという意味合いから、インターネットのことをWANと呼ぶ場合もある。
クライアント
	クライアントとは、顧客、依頼人、得意先、施主などの意味を持つ英単語。
	ITの分野では、他のコンピュータやソフトウェアから機能や情報の提供を受けるコンピュータやソフトウェアのことをクライアントという。提供する側のコンピュータやソフトウェアを「サーバ」（server）と呼び、サーバとクライアントで構成されるシステムを「クライアントサーバシステム」（CSS：Client Server System）という。
	クライアントはサーバの機能や情報の提供を受け、自らは利用者への情報の提示や入力・操作の受け付けなどを担当することが多い。クライアントがサーバに処理要求（リクエスト）を送り、サーバがこれに応じて処理を行い、結果を返答（レスポンス）する、という形で一連の処理が進められる。
	コンピュータ（ハードウェア）のことを明示的に指し示す場合は「クライアントコンピュータ」「クライアントマシン」「クライアント機」などと呼ばれ、ソフトウェアのことを指す場合は「クライアントソフト」「クライアントソフトウェア」「クライアントプログラム」などと呼ばれる。また、「メールクライアント」「DHCPクライアント」のように、システムや通信方式などの種類を冠して「○○クライアント」と称するのが一般的。
サーバー
	サーバとは、コンピュータネットワークにおいて、他のコンピュータに対し、自身の持っている機能やサービス、データなどを提供するコンピュータのこと。また、そのような機能を持ったソフトウェア。
	コンピュータ（ハードウェア）のことを明示的に指し示す場合は「サーバコンピュータ」「サーバマシン」「サーバ機」などと呼ばれ、ソフトウェアのことを指す場合は「サーバソフト」「サーバソフトウェア」「サーバプログラム」などと呼ばれる。
	通常、個々のサーバ機やサーバソフトは外部に提供する機能やサービス、対応しているデータ形式やプロトコル（通信規約）が決まっており、「データベースサーバ」「Webサーバ」「ファイルサーバ」のように、提供する機能などの種類を冠して「○○サーバ」と呼ぶ。
	一方、ネットワークを通じてサーバにアクセスし、その機能やサービス、データなどを受信したり利用したりするコンピュータやソフトウェアは「クライアント」（client）と呼ばれる。
■ 各種プロトコル
HTTP
	HTTPとは、WebサーバとWebクライアントの間でデータの送受信を行うために用いられるプロトコル（通信規約）。Webページを構成するHTMLファイルや、ページに関連付けられたスタイルシート、スクリプト、画像、音声、動画などのファイルを、データ形式などのメタ情報を含めてやり取りすることができる。
	HTTPはクライアントから要求（HTTPリクエスト）を送り、サーバが応答（HTTPレスポンス）を返すプル型（リクエスト/レスポンス型）の通信を基本としており、WebブラウザやWebクローラなどのクライアントから送信する要求の形式や、Webサーバからの応答の形式などを定めている。HTTPリクエストおよびレスポンスは要求や返答の内容、資源の種類や形式などの情報、および関連する情報を記述したヘッダ部と、送受信する資源（ファイルなど）の本体であるボディ部で構成される。ボディ部は基本的にはレスポンスに存在するが、クライアント側からデータを送信する際にはリクエストにも付加される。
	HTTPは下位（トランスポート層）のプロトコルとして標準ではTCPを利用することが多いが、SSL/TLSを用いて暗号化されて伝送されることもある。この通信手順は「HTTP over SSL/TLS」と呼ばれ、URL/URIのスキーム名として通常の「http:」に代えて「https:」を用いる。
FTP
	FTPとは、インターネットなどのTCP/IPネットワークでファイル転送を行うことができるプロトコル（通信規約）の一つ。
	FTPサーバ、FTPクライアントの二種類のソフトウェアを用い、両者の間で接続を確立し、クライアントからの要求に基づいてファイルを送受信することができる。サーバ側ではアカウント名とパスワードによる利用者の認証を行い、それぞれの利用者に許可された権限や領域（ディレクトリ）で送受信が行われる。
	コマンドや応答など制御データの送受信用と、ファイルの一覧やファイルの内容などデータ本体の送受信用に二つの伝送路（コネクション）を確立する。特に指定がない場合、サーバ側では制御用にTCPの21番ポート、データ用にTCPの20番ポートを用いる。
	制御用コネクションはクライアント側からサーバ側へ接続を開始して確立し、利用者認証、現在位置（カレントディレクトリ）のファイル一覧の要求や別の位置への移動、ファイルの指定や送受信の開始の指示などに使われる。
HTTPS
	HTTPSとは、通信方式の種別などを表すURIスキームの一つで、Webのデータ転送に用いられるHTTPが、SSLやTLSで暗号化されている状態を表したもの。WebサーバとWebブラウザの間の通信が暗号化されていることを意味し、通信経路上での盗聴や改竄、第三者によるなりすましを防止する。
	インターネット上での情報資源を指し示すのに「http://www.example.com/」といった形式の「URL」（Uniform Resource Locator）あるいは「URI」と呼ばれる書式が用いられる。先頭部分の「http://」は資源の種類や通信方式、プロトコル（通信手順）などを表すスキームと呼ばれる要素で、通常のWeb通信ではHTTPによる通信を表す「http://」を用いる。
	HTTPには通信の暗号化についての仕様が無いため、環境によっては通信内容を伝送途上で盗み見られたり途中で内容をすり替えられる危険がある。このため、暗号化プロトコルの「SSL」（Secure Socket Layer）あるいは後継の「TLS」（Transport Layer Security）で暗号化されたデータ伝送路を確立し、その中でHTTPによる通信を行うという方式が用いられる。
	この通信方式を「HTTP over SSL/TLS」と呼び、スキームとして「https://」を用いる。アクセスしたいWebサイトのアドレス（URL）や、Webブラウザに表示されたWebページのアドレス欄などが「https://」で始まっていることを確認すれば、そのページのデータ伝送がSSL/TLSによって保護されていることが確認できる。
	暗号化にはデジタル証明書が用いられ、Webブラウザのアドレス欄の近くにあるアイコンなどをクリック/タップすることなどにより、証明書の発行元（認証局）や、暗号方式の詳細、発行元に登録されたWebサーバ運営者の身元情報などを知ることができる。
	HTTPは標準でTCPの80番ポートを使用して通信するが、HTTPS向けには標準でTCPの443番ポートが使われる。「https://www.example.com:8080/」のように特定のポートを指定することもできる。SSL/TLSを組み合わせて暗号化するプロトコルは他にもあり、SMTPを暗号化したSMTPS、POP3を暗号化したPOP3S、IMAP4を暗号化したIMAPSなどがよく知られる。
SSL
	SSLとは、インターネットなどのIPネットワークでデータを暗号化して送受信するプロトコル（通信手順）の一つ。データを送受信する一対の機器間で通信を暗号化し、中継装置などネットワーク上の他の機器による成りすましやデータの盗み見、改竄などを防ぐことができる。
	SSLは公開鍵暗号を応用したデジタル証明書による通信相手の認証（一般的にはサーバの認証）と、共通鍵暗号（秘密鍵暗号）による通信の暗号化、ハッシュ関数による改竄検知などの機能を提供する。Webアクセスに使われるHTTPと組み合わせ、Webサイトで認証情報や個人情報、決済情報などの送受信を安全に行う手段として広く普及している。
SSH
	sshとは、主にUNIXコンピュータで利用される、ネットワークを介して別のコンピュータにログインして操作するためのソフトウェアの一つ。通信経路が暗号化されるため、インターネットなどを経由しても安全にアクセスすることができる。
	コンピュータ上で動作しているOSに利用者が指示を与えるためのシェル（shell）と呼ばれるプログラムの一種で、遠隔からコンピュータの操作画面を呼び出し、手元のコンピュータのキーボードなどで入力したコマンド（命令）などを送信して実行し、結果を受信して表示することができる。公開鍵暗号と秘密鍵暗号を組み合わせて通信経路を暗号化し、パスワードなどの認証情報や入力されるコマンド、出力された処理結果などをすべて暗号化して送受信する。
ポート、ポート番号
	ポートとは、「港」という意味の英単語で、ITの分野では機器やソフトウェアが外部の別の主体と接続・通信するための末端部分のことを比喩的にこのように呼ぶ。
	最も一般的な用法として、機器の筐体などに設けられたケーブルやコネクタの差込口のことをポートという。コンピュータ本体には周辺機器やネットワークと接続するためのポートが設けられており、接続方式の名称を冠してUSBポートやLANポート（Ethernetポート）などのように呼ぶ。
	物理的な端子そのものだけでなく、ソフトウェアが端子を通じて外部とデータを入出力するできるよう、オペレーティングシステム（OS）などによって抽象化されたインターフェース（WindowsのCOMポートなど）のことを指す場合もある。
	ポート番号とは、インターネットで標準的に用いられるプロトコル（通信規約）であるTCP/IPにおいて、同じコンピュータ内で動作する複数のソフトウェアのどれが通信するかを指定するための番号。単に「ポート」と略されることもある。
	TCP/IPは階層型のプロトコル体系で、ネットワーク層のIP（Internet Protocol）の上でトランスポート層のTCP（Transmission Control Protocol）やUDP（User Datagram Protocol）が、さらにその上で様々な個別の目的に使われるアプリケーション層の諸プロトコル（HTTPやSMTPなど）が通信する。
	IPにはネットワーク上で機器を識別・指定するIPアドレスという番号が定められており、データの送信元や宛先を記述することができるが、これだけでは通信内容が何のプロトコルで、機器上のどのプログラムが扱えば良いかを通信相手に伝えることができない。このため、TCPやUDPにはプロトコルや対象プログラムを識別・指定する番号としてポート番号が用意されている。
	ポート番号は16ビットの値で、通常は0から65535までの符号なし整数として表記する。TCPとUDPのそれぞれについて用意されており、「TCP/80」「UDP/123」のようにTCPとUDPの別を併記する。TCPとUDPで同じ番号が同じ用途に与えられ、どちらにするか通信時に選択できる場合もある。URL（URI）の一部として指定する場合は「http://www.example.com:80/」「https://192.168.1.1:443/」のようにホスト名やIPアドレスの末尾にコロン（:）を付して追記する。
	どのポート番号を何に利用するかは、通信する二者の交渉と合意により任意に設定・変更できるが、インターネットで用いられる識別番号や識別名の登録・管理を行っているIANAでは、0番から49151番までを登録ポート番号（registered port numbers）、そのうち特に1023番以下の番号を著名ポート番号（well-known port numbers）として主な用途を指定している。49152番以降はどのように用いても自由な番号で、クライアントなどが一時的な通信のために用いることが多いためエフェメラルポート（ephemeral:一時的な）あるいは動的ポートとも呼ばれる。
HTTP、FTP、SSHの各ポート番号
	著名なポート番号のうち特に2桁や3桁の番号のいくつかは、広く普及しているアプリケーション層のプロトコルの標準ポート番号として用いられている。例えば、TCP/20～21はFTP、TCP/22はssh、TCP/23はTelnet、TCP/25はSMTP、UDP/53はDNS、UDP/67～68はDHCP、TCP/80はHTTP、TCP/110はPOP3、TCP/123はNTP、UDP/137～138とTCP/139はNetBIOS、TCP/143はIMAP4、TCP/443はHTTPS、TCP/587はSMTPサブミッションポートなどとなっている。
ファイアウォール
	ファイアウォールとは、ネットワークの境界に設置され、内外の通信を中継・監視し、外部の攻撃から内部を保護するためのソフトウェアや機器、システムなどのこと。原義は「防火壁」で、外部からの攻撃に対する防御を、火事の炎を遮断して延焼を防ぐことになぞらえている。
	一般的な構成では、ファイアウォールに内部ネットワークの回線と外部ネットワークの回線を両方つなぎ、内部と外部の通信が必ずファイアウォールを通過するようにして、ファイアウォールが一定の基準に従って不正と判断した通信を遮断する。
	サーバコンピュータ上でソフトウェアとして動作するものと、専用の通信機器として提供されるものがあり、コストや導入の容易さを重視する場合は前者を、規模や性能が必要な場合は後者を用いることが多い。
	主な機能はパケットフィルタリングで、内外を通過するパケットの制御情報や内容を読み取り、あらかじめ指定された条件に基づいて通過の可否を判断する。よく用いられる条件として、送信元IPアドレス、宛先IPアドレス、プロトコルの種類（ICMP/UDP/TCP）、送信元ポート番号、宛先ポート番号、通信の方向（内部→外部/外部→内部）などがあり、これらの組み合わせによって可否を指定することができる。
	形式的な判定だけでなく、TCPコネクションの状態などを一定の過去まで記録しておき、過去の通信と辻褄の合わない奇妙な制御情報が記載されたパケットが届くと攻撃の試みであるとみなして拒絶する「ステートフルパケットインスペクション」（SPI）など、高度な判断が可能な製品もある。	
TCP
	TCPとは、インターネットなどのネットワークで、IP（Internet Protocol）の一段階上位層のプロトコル（通信規約）として標準的に使われるものの一つ。
	IPと、HTTPなど各用途固有の上位プロトコルとの橋渡しをするもので、ポート番号という識別番号を用いて、各IPデータグラムが運んでいるデータがどの上位プロトコルのものであるかを識別し、担当のソフトウェアに振り分けたりすることができる。
■ IPアドレス
IPアドレス
	IPアドレスとは、インターネットなどのTCP/IPネットワークに接続されたコンピュータや通信機器の一台ごとに割り当てられた識別番号。現在主流のIPv4では32ビットの値となっており、一つのネットワークに最大約42億台が参加できる。
	インターネットなどのネットワークでは機器間の通信をIP（Internet Protocol）と呼ばれる共通のプロトコル（通信規約）によって行う。IPアドレスはこのIPネットワークにおける個々の機器を識別するための番号で、データの宛先の指定や送信元の特定などに用いられる。
	現在インターネットなどで広く普及しているIPはIPv4（IPバージョン4）で、アドレスを32ビットの値として表す。書き表す場合には先頭から順に8ビットごとに区切り、それぞれを十進数の値として「.」（ピリオド/ドット）で区切って表記する。例えば、「11000110 00110011 01100100 00000001」というアドレスは「198.51.100.1」のように表記する。
	TCPはコネクション型のプロトコルで、通信相手の状況を確認して接続を確立し、データの伝送が終わると切断するという手順を踏む。相手が確実にデータを受け取ったかを確認したり、データの欠落や破損を検知して再送したり、届いたデータを送信順に並べ直したりといった制御を行う。信頼性は高いが転送効率は低く、通信経路の品質が低いとデータの到着に遅延が生じたり通信不能になりやすい。転送効率より確実性が重視される用途でよく利用される。
グローバルIPアドレス
	グローバルアドレスとは、インターネットに直に接続された機器に割り当てられるIPアドレス。
	インターネット上で機器やネットワークを識別・同定するのに用いられる番号であり、インターネットで通信を行うためには必ず必要となる。企業や個人がグローバルアドレスを利用する場合は、契約しているISPなどが運用しているグローバルアドレスの中から割り当てを受けることが多い。
	個々のIPアドレスはネットワーク内で一意でなければならない（複数の異なる機器が同じアドレスを名乗ることはできない）が、インターネットは様々な組織のネットワークが相互に接続されて成り立っているため、アドレスの重複を避けるため統一的にアドレス割り当ての管理・調整を行う国際的な仕組みが存在する。
	グローバルアドレス全体の管理はICANN（Internet Corporation for Assigned Names and Numbers）と呼ばれる非営利組織が行っており、世界の各地域を統括する調整機関（RIR：Regional Internet Registry）に大きなブロックごとアドレスを割り当て、RIRが域内の各国・地域のNIC（Network Information Center）にブロックを分割して割り当てる。各国のNICは国内の個々の組織やインターネット接続事業者（ISP：インターネットサービスプロバイダ）などからの要請に基づきアドレスを発行する。日本で利用されるグローバルアドレスは、ICANNがAPNIC（Asia Pacific Network Information Centre）に、APNICがJPNIC（Japan Network Information Center）に割り当てたアドレスブロックの中から割り当てられる。
プライベートIPアドレス
	企業など組織の内部で運用されるネットワーク上で各機器に割り当てられるIPアドレス。
	組織内のローカルなネットワーク内でのみ有効なIPアドレスで、その組織のネットワーク管理者が自由に発行することができ、アドレス数の制限などもない。インターネット上で有効なアドレスとの重複を避けるため、ローカルアドレス専用のアドレス領域（IPv4の場合「192.168.」で始まるものなど）が設けられており、これを使うべきであるとされる。
	インターネットなど外部のネットワークでは無効なアドレスであるため、ローカルアドレスしか持たない機器が外部と通信するには、ネットワーク境界に設置された機器がNATやNAPTなどによるアドレス変換や、プロキシなどによる中継を行なう必要がある。
	これに対し、インターネット上で有効なグローバルアドレス（global address）は、ISP（インターネットサービスプロバイダ）などから割り当てを受ける必要がある。
■ ドメイン
ドメイン
	ドメインとは、範囲、領域などの意味を持つ英単語で、ITの分野ではインターネットなどのTCP/IPネットワーク上で機器やネットワークを識別するドメイン名（domain name）を指すことが多い。
DNS
	DNSとは、インターネットなどのIPネットワーク上でドメイン名（ホスト名）とIPアドレスの対応関係を管理するシステム。利用者が単なる番号列であるIPアドレスではなく、日常使っている言語の文字を組み合わせた認識しやすいドメイン名でネットワーク上の資源にアクセスできるようにする。
	IPネットワークではIPアドレスと呼ばれる数値列で個々のコンピュータやネットワークを識別するが、DNSを使えば人間にとって親しみやすい文字や記号の並びで「ドメイン名」（domain name）と呼ばれる別名をつけることができる。ドメイン名が単一の機器を指し示す場合は「ホスト名」（host name）とも呼ばれる。
	各ドメイン名について、ホスト名とIPアドレスの対応関係や管理情報などを記録し、一定の通信手順に基づいてどこからでも容易に参照できるようにした世界規模の世界規模の分散型データベースがDNSである。	
VPN
	VPNとは、通信事業者の公衆回線を経由して構築された仮想的な組織内ネットワーク。また、そのようなネットワークを構築できる通信サービス。企業内ネットワークの拠点間接続などに使われ、あたかも自社ネットワーク内部の通信のように遠隔地の拠点との通信が行える。
	古くは電話回線（音声通話サービス）で提供されていたもので、全国に拠点を持つ大企業の内線電話などを公衆網を中継して接続するサービスだった。最近ではもっぱらデータ通信の拠点間接続サービスのことを指し、企業内LANを通信キャリアの持つバックボーンネットワークを通じて相互に接続するサービスをいう。かつては各拠点の間に専用線を導入して直接通信していたが、キャリアのバックボーンに「相乗り」することにより低コストで拠点間接続が可能となる。バックボーンでは様々な企業のデータが混在して流れることになるが、データは認証や暗号化で厳重に保護・管理されるため、混信や漏洩、盗聴などの危険性は低い。
ブリッジ
	ネットワークの分野で、複数のネットワークセグメントを結ぶ中継機器のうち、受信したデータのMACアドレスなどデータリンク層（リンク層、第2層、MAC層）の宛先情報を参照して中継の可否を判断する機能を持ったものをネットワークブリッジあるいは単にブリッジという。
	ブリッジは接続されたセグメントから流れてきたデータの宛先情報を解析し、もう一方のセグメントに関係する（宛先がそのセグメントに存在する、ブロードキャストフレームであるなど）ものであれば中継し、そうでないものは破棄する。無駄な信号が流れるのを防いで性能を向上させることができる。
	もとは一本のケーブルに複数の機器を繋ぐバス型ネットワークで用いられる中継機器を指し、集線装置（ハブ、アクセスポイント等）を介して複数の機器を繋ぐスター型ネットワークでは同様の機能を持つ機器を「スイッチ」（switch、ネットワークスイッチとも）というが、スイッチを含むリンク層の中継機器の総称をブリッジという場合もある。
	これに対し、すべての信号をすべてのセグメントに中継する、物理的に信号を再送信するだけの物理層（第1層）の中継機器を「リピータ」（repeater）、ネットワーク層（インターネット層、第3層）の宛先情報などに基いて経路制御などを行なう機器を「ルータ」（router）という。
プロキシサーバー
	プロキシとは、企業などの内部ネットワークとインターネットの境界にあり、内部のコンピュータの「代理」（proxy）としてインターネット上のコンピュータへ接続を行うコンピュータのこと。また、そのような機能を持つサーバソフトウェア。
	プロキシサーバは内部のコンピュータから外部へのアクセス要求を受信すると自らが接続元となって要求を行い、応答が帰ってくると内部のコンピュータへ取り次ぐ。外部のサーバなどから見るとプロキシが接続してきたように見え、内部のコンピュータの存在やそのアドレスなどをある程度秘匿することができる。
	プロキシはアプリケーション層で動作するため、メール用、Web用などプロトコルやアプリケーションごとに用意する必要がある。通常、単にプロキシといった場合はWeb閲覧のためのHTTP通信を中継するHTTPプロキシ（Webプロキシ）のことを指す。原則としてWebブラウザなどにプロキシを経由する設定を明示的に行わなければ利用できないが、ネットワーク内の通信装置の設定などによりすべてのアクセスを自動的（強制的）にプロキシ経由とする方法もあり、「透過プロキシ」（transparent proxy）と呼ばれる。
■ 電子メール
SMTP
	SMTPとは、インターネットなどのTCP/IPネットワークで標準的に用いられる、電子メール（eメール）を伝送するための通信手順（プロトコル）の一つ。
	利用者（の使うメールソフト）からメールサーバに送信依頼する際や、メールサーバ間でメールを転送する際にシステム間で交わされる要求や応答のデータ形式、伝送手順などを定めている。
	SMTPでメールを転送するソフトウェアをMTA（Mail Transfer Agent）あるいはSMTPサーバ（SMTP server）という。一方、受信側でクライアントへメールを配送するソフトウェアはMRA（Mail Retrieval Agent）と呼ばれ、受信プロトコルの違いによりPOP3サーバ、IMAP4サーバなどに分かれる。
POP
	POPとは、インターネットなどのTCP/IPネットワークで標準的に用いられる、電子メール（eメール）を受信するための通信規約（プロトコル）の一つ。
	利用者が自分宛ての電子メールを保管しているメールサーバにアクセスし、新しいメールが届いているか調べたり、手元のメールソフトなどにメールを受け取るための通信方法を定めている。
	POPを利用する場合は原則として届いたメールはすべてクライアント（メールソフト）側にダウンロードしてサーバからは削除し、メールソフト上で未既読の管理やフォルダなどによる分類を行う。この方式はネットに接続されていなくてもすべての受信メールを見ることができ、サーバのメール保管容量も少なくて済むが、複数の端末で同じメールアドレスを利用したい場合には向いていない。そのような場合はサーバ上で既読管理や分類などを行うことができるIMAP4を使ったり、Webメールシステムを使うことが多い。
IMAP
	IMAPとは、インターネットなどのIPネットワークで標準的に用いられる、電子メール（eメール）を受信するための通信規約（プロトコル）の一つ。利用者が自分宛ての電子メールを保管しているメール受信サーバにアクセスし、新着を確認したり一覧から必要なものを選んで手元に受信する手順を定めている。
	IMAPでは原則として、届いたメールをメールサーバ上にメールアドレス（アカウント）ごとに設けられた専用の保存領域（メールボックス）で管理する。利用者はサーバからメールの一覧を取得して必要な物を選択し、手元のコンピュータにダウンロードして閲覧する。
	サーバ上で各メールの既読状態の管理、フォルダを用いた分類などを行なうこともでき、添付ファイルなどで容量が大きい場合などにメールの一部だけ（ヘッダ部分だけ、本文だけなど）受信する機能もある。メールをサーバ側で管理するため、一つのアドレスを複数のコンピュータから利用することも容易である。
■ セッションとクッキー
セッション
	セッションとは、活動期間、学期、会期、開催期間、集会などの意味を持つ英単語。ITの分野では、コンピュータシステムやネットワーク通信において、接続/ログインしてから、切断/ログオフするまでの、一連の操作や通信のことをこのように呼ぶ。
	あるコンピュータシステムに利用者や別のシステムがアクセスし、連続して交わされる一連の通信や操作の連なりをセッションという。最初のアクセス時に認証やアクセス元情報の取得などによって相手を識別し、セッションを開始・確立する。
	通信中はやり取りの内容や現在の状態が記録され、指示や操作に反映される（ステートフル）。通信が終わると終了の手続きによりセッションが終了・切断される。システムによっては次回のアクセス時に前回セッションの続きの状態から利用を開始できる場合もある。
クッキー
	Cookieとは、Webサイトの提供者が、Webブラウザを通じて訪問者のコンピュータに一時的にデータを書き込んで保存させる仕組み。
	CookieにはWebサイト（Webサーバ）側が指定したデータを保存しておくことができ、利用者の識別や属性に関する情報や、最後にサイトを訪れた日時などを記録しておくことが多い。ネットサービスなどのサイトで利用者のIDなどが保存されると、次にアクセスしたときに自動的に利用者の識別が行われ、前回の続きのようにサービスを受けることができる。
	1つのCookieには4096バイトのデータを記録でき、1台のサーバが同じコンピュータに対して発行できるCookieの数は20個に制限されている。Cookieの総数は300個までで、これを超えると古い方から削除される。また、個々のCookieには有効期限が設定されており、期限を過ぎたものは破棄される。
キャッシュ
	キャッシュとは、低速な記憶装置や伝送路から読み出したデータのうち、直近に読み込んだものや使用頻度が高いものを高速な記憶装置に複製しておくこと。また、その際に使われる高速な記憶装置や、複製されたデータそのもののこと。データの読み込みを高速化したり、伝送量を削減することができる。
	例えば、コンピュータのメインメモリはストレージ装置に比べれば何桁も高速にデータの読み書きが行えるため、使用頻度の高いデータをメモリ内に保持しておくことにより、すべてのデータをストレージに置いた場合よりも処理を高速化することができる。この場合、メモリ（に複製されたデータ）がストレージのキャッシュである。
	同様の手法は通信においても利用することができ、通信ネットワークを介して外部の別の機器から受信したデータをストレージに保存しておくことで、次に必要になったときに高速に読み出すことができる。手元にデータをとっておくことで、通信回線の帯域幅（伝送容量）や伝送量（および伝送料）を節約する効果もある。
	コンピュータのCPU（マイクロプロセッサ/MPU）の内部には演算装置から高速にアクセスできる小容量の特殊なメモリ回路が内蔵されており、これを「キャッシュメモリ」（cache memory）という。メインメモリよりも遥かに高速に読み書きできるため、使用頻度の高いデータを記録しておくことでメモリからの読み込み時間を削減して性能を向上させることができる。
■ DB（データベース）について
インデックス
	インデックスとは、索引、見出し、添字、指数などの意味を持つ英単語。ITの分野では、書籍の巻末の索引のように、多数のものの中から特定の対象をすばやく見つけ出すため識別情報や、整列された所在情報の一覧などを指すことが多い。
	プログラミングなどの分野では、同種の複数のものが並んでいるときに、個々の要素を区別するために付けられた通し番号などの識別情報をインデックスという。配列の要素を指し示す添字などが該当する。
	データベースやファイルシステム、検索エンジンなどでは、収集・格納された大量のデータをすばやく検索・抽出するために作成された索引データをインデックスという。データ本体を端から順に探すよりも圧倒的に短い手順で目的のデータを探し出せる。
	具体的には、見出しとなる識別符号と、データ本体のある所在情報などを対応付け、整列・分類などを行ったあと木構造やハッシュテーブルなど検索に適したデータ構造に格納したものを指すことが多い。
■ テストについて
フロー
	ソフトウェアやプログラミングの分野では、コンピュータプログラムを構成する命令や手続き、処理の流れなどのことをフローという。矩形や矢印などを組み合わせてこれを図示したものをフローチャートという。
	通信の分野では回線を通じて伝送される信号やデータの流れを「データフロー」（data flow）あるいは単にフローという。情報システム上での機器間やソフトウェア間のデータの移動や伝達のこともデータフローということがある。
	企業の情報システムなどで、システム化の対象となる事業や業務における手順や手続きの流れのことを「ワークフロー」（workflow）あるいは単にフローという。
■ チケット管理ツール
タスク
	タスクとは、仕事、課業、職務、任務などの意味を持つ英単語。ビジネス用語として業務を構成する個々の作業や工程などを表すほか、コンピュータの分野ではソフトウェアの実行単位のことをタスクということがある。
	ソフトウェアについてタスクという場合、分野や製品などによっていくつかの用法があり統一された厳格な定義などはない。よく知られる用法としては、メインメモリ上に展開され実行状態にあるプログラムのことを指すもので、「プロセス」（process）とほぼ同義である。複数のプロセスを同時並行に実行できるOSの機能や構造を「マルチタスク」（multitasking）、そのような機能がなく同時に一つのプロセスしか実行できないことを「シングルタスク」（single-tasking）という。
	また、一つのプログラムが並行する複数の処理の流れを同時に実行する場合に、その一つ一つの連続した命令の流れのことをタスクということがあり、こちらは「スレッド」（thread）とほぼ同義となる。
■ バージョン管理
Git
	Gitとは、オープンソースの分散バージョン管理システムの一つ。複数の開発者が共同で一つのソフトウェアを開発する際などに、ソースコードやドキュメントなどの編集履歴を統一的に管理するのに用いられる。
	バージョン管理システムの基本的な機能として、プロジェクトを構成するファイルやディレクトリにいつ誰がどのような変更を行ったかを記録しており、必要に応じて特定の日時の版を参照したり、その状態に戻したりすることができる。また、プロジェクトの時系列を分岐（ブランチ）して派生プロジェクトを作成したり、それを再び元の系列に融合（マージ）したりすることができる。
	Gitは分散バージョン管理システムに分類され、管理するデータの集合体であるリポジトリ（repository）を、各利用者の手元のコンピュータに丸ごと複製し、必要に応じて中央の管理サーバと同期する方式を取っている。
	開発者はデータの取り出しや保存を手元のローカルリポジトリに対して行い、任意のタイミングでこれを中央のリモートリポジトリに反映（「プッシュ」という）させる手順を取る。これにより、常にサーバと通信可能でなくても編集が可能となり、検索や参照なども高速に行なうことができる。
	Gitの中央リポジトリを作成・運用できるインターネット上のサービスもあり、「GitHub」（ギットハブ）や「GitLab」（ギットラボ）などが有名である。こうしたホスティングサービスを利用してリポジトリを作成し、各開発者がGitでアクセスして協働するというスタイルがオープンソースソフトウェアの開発などで広く普及している。
	Gitは著名なオープンソースのオペレーティングシステム（OS）である「Linux」（リナックス）のカーネル（中核部）の開発を管理するために、Linux開発創始者のリーナス・トーバルズ（Linus B. Torvalds）氏らによって開発が始められた。それまでLinux開発に用いられてきた「BitKeeper」（ビットキーパー）を参考に、大規模な開発プロジェクトでも高い処理性能を発揮することを主眼に置いている。GPL（GNU General Public License）と呼ばれる利用許諾（ライセンス）に基づきオープンソースソフトウェアとして公開されている。
SVN
	Subversionとは、著名なオープンソースのバージョン管理システムの一つ。複数の開発者が共同で一つのソフトウェアを開発する際などに、ソースコードやドキュメントを管理するのに用いられる。CVS（Concurrent Versions System）を参考に開発され、基本的なコマンドなどはCVSと共通になっている。
	バージョン管理システムの基本的な機能として、リポジトリと呼ばれるサーバ上の領域でファイルを集中的に管理し、複数の作業者が並行して内容を更新していくことができるようにする。個々のファイルにいつ誰がどのような変更を行ったかを記録しており、必要に応じて特定の日時の版を参照したり、その状態に戻したりすることができる。また、プロジェクトの時系列を分岐（ブランチ）して派生プロジェクトを作成したり、それを再び元の系列に融合（マージ）したりすることができる。
	CVSではできなかったファイル名の変更やディレクトリの移動・削除などが可能になっている。最新版のファイルを手元にキャッシュとして保存するため、無駄な通信が省かれ高速に同期することができる。sshを標準でサポートしており、インターネット上でも安全にファイルのやりとりができる。
	UNIX系OSなどではsvnというコマンドラインツールが利用できるほか、WindowsやmacOS用のクライアントソフトやEclipseなどの統合開発環境（IDE）に組み込んで利用できるプラグインなども開発・公開されている。
デグレ
	デグレードとは、新しいバージョンのソフトウェアの品質が、以前より悪くなること。また、以前修正した不具合やバグが再発・復活すること。新しいファイルなどを古い内容で上書きしてしまい、更新内容が失われることを指す場合もある。
	ソフトウェアが更新・修正される場合、利用者は機能・性能の向上、バグや不具合の減少を期待するが、性能が悪化したり、これまで使えた機能が使えなくなったり、バグや不具合が増えるなど、かえって品質が下がってしまうことがある。この現象をデグレードという。
	主な原因としては、新たに開発した部分のテストやデバッグが不十分だったり、ソースコードのバージョン管理に失敗してバグの残っている古いコードを使ってしまったり、ある部分に施した修正が別の部分に及ぼす影響の評価が不十分であることなどが挙げられる。
マージツール
	MDLファイル中の既存のマップ式を保持しながら，FDLファイル又はDTDファイルの変更内容をMDLファイルにマージする機能です。